Hello - from /Users/figitaki/bin/reason-language-server.exe
Previous log location: /var/folders/nm/4k7tt6bs52l83sdxpsl2tycw0000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json", "globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/Hooks.re","languageId":"reason","version":1,"text":"/// The semantics are as follows:\n///\n/// 1. Path is always aquired from a URL.\n/// 2. We listen to the main process for new routes while the page is open\n///\nlet useRoute = () => {\n  let url = ReasonReact.Router.useUrl();\n\n  let path = Route.parse(url.hash);\n\n  switch (path) {\n  | None => Js.log2(\"Failed to parse route: \", url.hash)\n  | Some(_) => ()\n  };\n\n  React.useEffect(() => {\n    let token = MainCommunication.listen();\n    Some(() => MainCommunication.stopListening(token));\n  });\n\n  path;\n};\n\nlet useSettings = () => {\n  let (settings, setSettings) =\n    React.useState(() => SettingsRenderer.loadSettings());\n\n  (settings, newVal => setSettings(_ => newVal));\n};\n"}}}
📣 📣 NEW BSB PACKAGE 📣 📣
- location: /Users/figitaki/src/coda/frontend/wallet
- bsPlatform: /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform
- buildSystem: bsb version 5.0.3
- build command: /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsb.exe -make-world
>> Build system running: /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsb.exe -make-world
>>> stdout
[1/1] [34mBuilding[39m [2mBsElectron.cmi[22m
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
[1/2] [34mBuilding[39m [2msrc/render/ReactApp.cmj[22m

  We've found a bug for you!
  /Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re 5:5-12
  
  3 ┆ let (settings, setSettings) = Hooks.useSettings();
  4 ┆ let initialContext = {
  5 ┆   settings: settings |> Tc.Result.toOption,
  6 ┆   setSettings: newSettings => {
  7 ┆     setSettings(Ok(newSettings));
  
  The record field settings can't be found.
  
  If it's defined in another module or file, bring it into scope by:
  - Annotating it with said module name: let baby = {MyModule.age: 3}
  - Or specifying its type: let baby: MyModule.person = {age: 3}
  
>>> stderr

Affected files: file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/figitaki/src/coda/frontend/wallet/bsconfig.json", "diagnostics": []}}
Deps @glennsl/bs-json, tablecloth-bucklescript, bs-css, reason-apollo, reason-react, bs-electron, @glennsl/bs-jest
Dep loc /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/bsconfig.json
Compiled base: /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/lib/bs
Source directories: /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/src
Source files found: /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/src/Json_decode.ml : /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/src/Json.mli : /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/src/Json.ml : /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/src/Json_decode.mli : /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/src/Json_encode.ml : /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/src/Json_encode.mli
Adding intf /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/src/Json.mli
Adding intf /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/src/Json_decode.mli
Adding intf /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/src/Json_encode.mli
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/src/Json.mli
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/src/Json_decode.mli
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/src/Json_encode.mli
Dep loc /Users/figitaki/src/coda/frontend/wallet/node_modules/tablecloth-bucklescript/bsconfig.json
Compiled base: /Users/figitaki/src/coda/frontend/wallet/node_modules/tablecloth-bucklescript/lib/bs
Source directories: /Users/figitaki/src/coda/frontend/wallet/node_modules/tablecloth-bucklescript/src
Source files found: /Users/figitaki/src/coda/frontend/wallet/node_modules/tablecloth-bucklescript/src/tablecloth.mli : /Users/figitaki/src/coda/frontend/wallet/node_modules/tablecloth-bucklescript/src/tablecloth.ml
Adding intf /Users/figitaki/src/coda/frontend/wallet/node_modules/tablecloth-bucklescript/src/tablecloth.mli
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/node_modules/tablecloth-bucklescript/src/tablecloth.mli
Dep loc /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-css/bsconfig.json
Compiled base: /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-css/lib/bs
Source directories: /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-css/src
Source files found: /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-css/src/Css_Colors.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-css/src/Css.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-css/src/Css.rei
Adding intf /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-css/src/Css.rei
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-css/src/Css.rei
Dep loc /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/bsconfig.json
Compiled base: /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/lib/bs
Source directories: /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/src - /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/src/graphql-types
Source files found: /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/src/ReasonApolloTypes.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/src/ApolloLinks.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/src/ApolloUtilities.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/src/ApolloConsumer.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/src/graphql-types/ReasonApolloMutation.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/src/graphql-types/ReasonApolloQuery.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/src/graphql-types/ReasonApolloSubscription.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/src/ApolloInMemoryCache.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/src/ReasonApollo.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/src/ReasonApolloUtils.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/src/ApolloProvider.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/src/ApolloClient.re
Dep loc /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/bsconfig.json
Compiled base: /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/lib/bs
Source directories: /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src
Source files found: /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReasonReactRouter.rei : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReasonReactCompat.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReactDOMRe.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReactEvent.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReactEventRe.rei : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReasonReact.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReasonReactOptimizedCreateClass.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReactDOMServerRe.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReasonReactCompat.rei : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReactEventRe.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReactEvent.rei : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReasonReact.rei : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReasonReactRouter.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/React.re
Adding intf /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReasonReactRouter.rei
Adding intf /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReactEventRe.rei
Adding intf /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReasonReactCompat.rei
Adding intf /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReactEvent.rei
Adding intf /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReasonReact.rei
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReasonReactRouter.rei
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReactEventRe.rei
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReasonReactCompat.rei
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReactEvent.rei
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/src/ReasonReact.rei
Dep loc /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/bsconfig.json
Compiled base: /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/lib/bs
Source directories: /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/src
Source files found: /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/src/BrowserWindow.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/src/Json.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/src/IpcRenderer.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/src/App.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/src/Menu.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/src/Common.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/src/IpcMain.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/src/Tray.re : /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/src/Window.re
adding namespace BsElectron : BsElectron : /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/lib/bs/BsElectron.cmt
Dep loc /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-jest/bsconfig.json
Compiled base: /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-jest/lib/bs
Source directories: /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-jest/src
Source files found: /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-jest/src/jest.ml : /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-jest/src/jest.mli
Adding intf /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-jest/src/jest.mli
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-jest/src/jest.mli
Got source directories ./src - ./src/render - ./src/render/components - ./src/common - ./src/main - __tests__
Source directories: /Users/figitaki/src/coda/frontend/wallet/src - /Users/figitaki/src/coda/frontend/wallet/src/render - /Users/figitaki/src/coda/frontend/wallet/src/render/components - /Users/figitaki/src/coda/frontend/wallet/src/common - /Users/figitaki/src/coda/frontend/wallet/src/main - /Users/figitaki/src/coda/frontend/wallet/__tests__
Source files found: /Users/figitaki/src/coda/frontend/wallet/src/render/IpcLinkRenderer.re : /Users/figitaki/src/coda/frontend/wallet/src/render/Router.re : /Users/figitaki/src/coda/frontend/wallet/src/render/ModalButtons.re : /Users/figitaki/src/coda/frontend/wallet/src/render/Modal.re : /Users/figitaki/src/coda/frontend/wallet/src/render/MainCommunication.re : /Users/figitaki/src/coda/frontend/wallet/src/render/Context.re : /Users/figitaki/src/coda/frontend/wallet/src/render/Page.re : /Users/figitaki/src/coda/frontend/wallet/src/render/MainCommunication.rei : /Users/figitaki/src/coda/frontend/wallet/src/render/components/TransactionsView.re : /Users/figitaki/src/coda/frontend/wallet/src/render/components/Main.re : /Users/figitaki/src/coda/frontend/wallet/src/render/components/Footer.re : /Users/figitaki/src/coda/frontend/wallet/src/render/components/WalletItem.re : /Users/figitaki/src/coda/frontend/wallet/src/render/components/WalletList.re : /Users/figitaki/src/coda/frontend/wallet/src/render/components/TransactionCell.re : /Users/figitaki/src/coda/frontend/wallet/src/render/components/Body.re : /Users/figitaki/src/coda/frontend/wallet/src/render/components/Window.re : /Users/figitaki/src/coda/frontend/wallet/src/render/components/Header.re : /Users/figitaki/src/coda/frontend/wallet/src/render/components/SideBar.re : /Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re : /Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re : /Users/figitaki/src/coda/frontend/wallet/src/render/Send.re : /Users/figitaki/src/coda/frontend/wallet/src/render/Preload.re : /Users/figitaki/src/coda/frontend/wallet/src/render/Theme.re : /Users/figitaki/src/coda/frontend/wallet/src/render/Index.re : /Users/figitaki/src/coda/frontend/wallet/src/render/Apollo.re : /Users/figitaki/src/coda/frontend/wallet/src/render/Delete.re : /Users/figitaki/src/coda/frontend/wallet/src/render/SettingsRenderer.re : /Users/figitaki/src/coda/frontend/wallet/src/render/Hooks.re : /Users/figitaki/src/coda/frontend/wallet/src/common/PublicKey.rei : /Users/figitaki/src/coda/frontend/wallet/src/common/Wallet.re : /Users/figitaki/src/coda/frontend/wallet/src/common/PublicKey.re : /Users/figitaki/src/coda/frontend/wallet/src/common/CallTable.re : /Users/figitaki/src/coda/frontend/wallet/src/common/ConsensusState.re : /Users/figitaki/src/coda/frontend/wallet/src/common/Bindings.re : /Users/figitaki/src/coda/frontend/wallet/src/common/Messages.re : /Users/figitaki/src/coda/frontend/wallet/src/common/Settings.rei : /Users/figitaki/src/coda/frontend/wallet/src/common/Settings.re : /Users/figitaki/src/coda/frontend/wallet/src/common/CallTable.rei : /Users/figitaki/src/coda/frontend/wallet/src/common/Route.re : /Users/figitaki/src/coda/frontend/wallet/src/common/Single.re : /Users/figitaki/src/coda/frontend/wallet/src/common/Tc.re : /Users/figitaki/src/coda/frontend/wallet/src/common/GraphqlLinkMessages.re : /Users/figitaki/src/coda/frontend/wallet/src/main/RendererCommunication.re : /Users/figitaki/src/coda/frontend/wallet/src/main/AppTray.re : /Users/figitaki/src/coda/frontend/wallet/src/main/SettingsMain.re : /Users/figitaki/src/coda/frontend/wallet/src/main/App.re : /Users/figitaki/src/coda/frontend/wallet/src/main/Application.re : /Users/figitaki/src/coda/frontend/wallet/src/main/AppWindow.re : /Users/figitaki/src/coda/frontend/wallet/src/main/DaemonProcess.re : /Users/figitaki/src/coda/frontend/wallet/src/main/SettingsMain.rei : /Users/figitaki/src/coda/frontend/wallet/src/main/ProjectRoot.re : /Users/figitaki/src/coda/frontend/wallet/src/main/IpcLinkMain.re : /Users/figitaki/src/coda/frontend/wallet/src/main/GraphqlMain.re : /Users/figitaki/src/coda/frontend/wallet/__tests__/wallet_test.re
Adding intf /Users/figitaki/src/coda/frontend/wallet/src/render/MainCommunication.rei
Adding intf /Users/figitaki/src/coda/frontend/wallet/src/common/PublicKey.rei
Adding intf /Users/figitaki/src/coda/frontend/wallet/src/common/Settings.rei
Adding intf /Users/figitaki/src/coda/frontend/wallet/src/common/CallTable.rei
Adding intf /Users/figitaki/src/coda/frontend/wallet/src/main/SettingsMain.rei
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/src/render/MainCommunication.rei
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/src/common/PublicKey.rei
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/src/common/Settings.rei
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/src/common/CallTable.rei
Bad source file (extension) /Users/figitaki/src/coda/frontend/wallet/src/main/SettingsMain.rei
-- All local modules found: 49
IpcLinkRenderer
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/IpcLinkRenderer.cmt
Router
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/Router.cmt
ModalButtons
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/ModalButtons.cmt
Modal
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/Modal.cmt
MainCommunication
Both
Context
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/Context.cmt
Page
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/Page.cmt
TransactionsView
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/components/TransactionsView.cmt
Main
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/components/Main.cmt
Footer
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/components/Footer.cmt
WalletItem
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/components/WalletItem.cmt
WalletList
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/components/WalletList.cmt
TransactionCell
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/components/TransactionCell.cmt
Body
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/components/Body.cmt
Window
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/components/Window.cmt
Header
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/components/Header.cmt
SideBar
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/components/SideBar.cmt
SettingsProvider
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/SettingsProvider.cmt
ReactApp
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/ReactApp.cmt
Send
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/Send.cmt
Preload
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/Preload.cmt
Theme
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/Theme.cmt
Index
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/Index.cmt
Apollo
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/Apollo.cmt
Delete
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/Delete.cmt
SettingsRenderer
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/SettingsRenderer.cmt
Hooks
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/Hooks.cmt
Wallet
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/common/Wallet.cmt
PublicKey
Both
CallTable
Both
ConsensusState
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/common/ConsensusState.cmt
Bindings
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/common/Bindings.cmt
Messages
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/common/Messages.cmt
Settings
Both
Route
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/common/Route.cmt
Single
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/common/Single.cmt
Tc
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/common/Tc.cmt
GraphqlLinkMessages
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/common/GraphqlLinkMessages.cmt
RendererCommunication
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/main/RendererCommunication.cmt
AppTray
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/main/AppTray.cmt
SettingsMain
Both
App
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/main/App.cmt
Application
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/main/Application.cmt
AppWindow
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/main/AppWindow.cmt
DaemonProcess
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/main/DaemonProcess.cmt
ProjectRoot
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/main/ProjectRoot.cmt
IpcLinkMain
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/main/IpcLinkMain.cmt
GraphqlMain
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/main/GraphqlMain.cmt
Wallet_test
impl /Users/figitaki/src/coda/frontend/wallet/lib/bs/__tests__/wallet_test.cmt
Dependency dirs /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/lib/bs/src /Users/figitaki/src/coda/frontend/wallet/node_modules/tablecloth-bucklescript/lib/bs/src /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-css/lib/bs/src /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/lib/bs/src /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/lib/bs/src/graphql-types /Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/lib/bs/src /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/lib/bs /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/lib/bs/src /Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-jest/lib/bs/src
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re
➡️ running bsc /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/components' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/common' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/main' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/__tests__' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/tablecloth-bucklescript/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-css/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/lib/bs/src/graphql-types' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/lib/bs' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-jest/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -ppx '/Users/figitaki/src/coda/frontend/wallet/node_modules/graphql_ppx/ppx' -ppx ''\''/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/reactjs_jsx_ppx_3.exe'\''' -ppx '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -warn-error @A -w -4-9-30-40-41-42-102 -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast with pwd /Users/figitaki/src/coda/frontend/wallet
Now loading /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.cmt
Size 5931
<< Making lastDefinitions with type error for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re
type error here [1mFile "[1m", line 5, characters 4-12[0m[0m:
[1;31mError[0m: Unbound record field settings
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re", "diagnostics": [{"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 12}}, "message": "Error: Unbound record field settings", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","languageId":"reason","version":1,"text":"[@react.component]\nlet make = () => {\n  let (settings,  setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: settings |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings))\n    }\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/common/Tc.re","languageId":"reason","version":1,"text":"// As suggested in https://github.com/darklang/tablecloth/commit/07cd22138c91dba4cb09a8976f13e5e86e72b90c\n// This module is our \"standard library\" an extension on top of Tablecloth\n\nmodule Caml = {\n  module String = String;\n  module List = List;\n  module Array = Array;\n};\n\ninclude (\n          Tablecloth:\n             (module type of Tablecloth) with\n              module Never := Tablecloth.Never and\n              module Task := Tablecloth.Task and\n              module Result := Tablecloth.Result and\n              module Option := Tablecloth.Option\n        );\n\nmodule Task = {\n  include Tablecloth.Task;\n\n  let return = a => succeed(a);\n\n  /// Take a `unit => Promise.t('a)`, make it into a `Task.t('x, 'a)`\n  let liftPromise = (f, ()) =>\n    f() |> Js.Promise.then_(a => Js.Promise.resolve(Belt.Result.Ok(a)));\n\n  /// Take a `unit => Promise.t('a)` which throws err, make it into a `Task.t(err, 'a)`\n  let liftErrorPromise = (f, ()) =>\n    f()\n    |> Js.Promise.then_(a => Js.Promise.resolve(Belt.Result.Ok(a)))\n    |> Js.Promise.catch(err => Js.Promise.resolve(Belt.Result.Error(err)));\n\n  let uncallbackifyValue = f => {\n    create(cb => f(a => cb(Belt.Result.Ok(a))));\n  };\n\n  /// Take a Node.js style ((nullable err) => unit) => unit function and make it\n  /// return a task instead\n  let uncallbackify0 = f => {\n    create(cb =>\n      f(err =>\n        switch (Js.Nullable.toOption(err)) {\n        | Some(err) => cb(Belt.Result.Error(err))\n        | None => cb(Belt.Result.Ok())\n        }\n      )\n    );\n  };\n\n  /// Take a Node.js style ((nullable err, nullable res) => unit) => unit\n  /// function and make it return a task instead\n  let uncallbackify = f => {\n    create(cb =>\n      f((err, x) =>\n        switch (Js.Nullable.toOption(err), Js.Nullable.toOption(x)) {\n        | (Some(err), _) => cb(Belt.Result.Error(err))\n        | (_, Some(x)) => cb(Belt.Result.Ok(x))\n        | (_, _) => failwith(\"The JS call you've bridged is funky\")\n        }\n      )\n    );\n  };\n};\n\nmodule Result = {\n  include Tablecloth.Result;\n\n  let map = (t, ~f) => map(f, t);\n  let andThen = (t, ~f) => andThen(~f, t);\n\n  let return = a => Belt.Result.Ok(a);\n  let fail = x => Belt.Result.Error(x);\n\n  let onError = (t: t('x, 'a), ~f) =>\n    switch (t) {\n    | Ok(v) => Belt.Result.Ok(v)\n    | Error(e) => f(e)\n    };\n\n  let ok_exn = (t: t(Js.Exn.t, 'a)): 'a => {\n    let string_of_str_option = s =>\n      switch (s) {\n      | None => \"None\"\n      | Some(s) => s\n      };\n\n    switch (t) {\n    | Ok(x) => x\n    | Error(e) =>\n      Js.Exn.raiseError(string_of_str_option(Js.Exn.stack(Obj.magic(e))))\n    };\n  };\n};\n\nmodule Option = {\n  include Tablecloth.Option;\n\n  let getExn = x => Belt.Option.getExn(x);\n\n  let map2 = (t1, t2, ~f) => {\n    switch (t1, t2) {\n    | (Some(a), Some(b)) => Some(f(a, b))\n    | _ => None\n    };\n  };\n};\n\nmodule Monad = {\n  module type S2 = {\n    type t('x, 'a);\n    let return: 'a => t('x, 'a);\n    let map: (t('x, 'a), ~f: 'a => 'b) => t('x, 'b);\n    let andThen: (t('x, 'a), ~f: 'a => t('x, 'b)) => t('x, 'b);\n  };\n\n  module Fail = {\n    module type S2 = {\n      include S2;\n      let fail: 'x => t('x, 'a);\n      let onError: (t('x, 'a), ~f: 'x => t('y, 'a)) => t('y, 'a);\n    };\n  };\n};\n"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Footer.re","languageId":"reason","version":1,"text":"open Tc;\n\nmodule Styles = {\n  open Css;\n\n  let footer =\n    style([\n      position(`fixed),\n      bottom(`px(0)),\n      left(`px(0)),\n      right(`px(0)),\n      display(`flex),\n      height(Theme.Spacing.footerHeight),\n      justifyContent(`spaceBetween),\n      alignItems(`center),\n      padding2(~v= `px(0), ~h= `rem(2.)),\n      borderTop(`px(1), `solid, Theme.Colors.borderColor),\n    ]);\n};\n\nmodule StakingSwitch = {\n  [@react.component]\n  let make = (~pubKey) => {\n    let context = React.useContext(SettingsProvider.context);\n    <div className=Css.(style([color(Theme.Colors.serpentine)]))>\n      <input\n        type_=\"checkbox\"\n        label=\"staking-switch\"\n        checked=true\n        onChange={_e => Js.log(\"TODO: Implement stake changing\")}\n      />\n      <span> {ReasonReact.string(\"Staking\")} </span>\n      <span className=Css.(style([fontFamily(\"Menlo\")]))>\n        {ReasonReact.string({j| ⚡︎ |j})}\n      </span>\n      <span>\n        {ReasonReact.string(\n          Tc.Option.andThen(~f=(s => SettingsRenderer.lookup(s, pubKey)), context.settings)\n          |> Option.withDefault(~default=pubKey |> PublicKey.toString)\n        )}\n      </span>\n    </div>;\n  };\n};\n\nmodule ActivityLogButton = {\n  [@react.component]\n  let make = () => {\n    <button>\n      <span> {ReasonReact.string(\"Activity Log\")} </span>\n      <span className=Css.(style([marginLeft(`rem(1.0))]))>\n        {ReasonReact.string({j|⌘L|j})}\n      </span>\n    </button>;\n  };\n};\n\nmodule RightButtons = {\n  module PublicKeyButton = {\n    [@react.component]\n    let make = (~pubKeySelected) => {\n      let str = ReasonReact.string(\"Copy public key\");\n      // The switch is over the <button> rather than within the onClick because\n      // if there exists an onClick the button is no longer disabled (despite\n      // disabled being true), and there is no way to give JSX an `option` for\n      // the click handler.\n      switch (pubKeySelected) {\n      | Some(pubKey) =>\n        <button\n          onClick={_e => {\n            let task =\n              Bindings.Navigator.Clipboard.writeTextTask(\n                PublicKey.toString(pubKey),\n              );\n            Task.perform(task, ~f=()\n              // TODO: Should we toast when this happens? Do we need to handle errors?\n              => Js.log(\"Copied to clipboard\"));\n          }}\n          disabled=false>\n          str\n        </button>\n      | None => <button disabled=true> str </button>\n      };\n    };\n  };\n\n  module SendButton = {\n    [@react.component]\n    let make = () => {\n      <button onClick={_e => Router.navigate(Route.Send)}>\n        {ReasonReact.string(\"Send\")}\n      </button>;\n    };\n  };\n\n  [@react.component]\n  let make = (~pubKeySelected) => {\n    <div> <PublicKeyButton pubKeySelected /> <SendButton /> </div>;\n  };\n};\n\n[@react.component]\nlet make = () => {\n  let stakingKey = PublicKey.ofStringExn(\"131243123\");\n  <div className=Styles.footer>\n    <StakingSwitch pubKey=stakingKey />\n    <ActivityLogButton />\n    <RightButtons pubKeySelected=None />\n  </div>\n};\n"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re","languageId":"reason","version":2,"text":"type context = {\n  settings: option(Settings.t),\n  setSettings: Settings.t => unit,\n};\n\nlet initialContext = {settings: None, setSettings: _ => ()};\n\nlet context = React.createContext(initialContext);\n\nlet make = context->React.Context.provider;\n\n[@bs.obj]\nexternal makeProps:\n  (~value: context, ~children: React.element, ~key: string=?, unit) =>\n  {\n    .\n    \"value\": context,\n    \"children\": React.element,\n  } =\n  \"\";\n"}}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Hooks.re
➡️ running bsc /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/components' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/common' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/main' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/__tests__' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/tablecloth-bucklescript/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-css/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/lib/bs/src/graphql-types' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/lib/bs' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-jest/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -ppx '/Users/figitaki/src/coda/frontend/wallet/node_modules/graphql_ppx/ppx' -ppx ''\''/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/reactjs_jsx_ppx_3.exe'\''' -ppx '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -warn-error @A -w -4-9-30-40-41-42-102 -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/Hooks.ast with pwd /Users/figitaki/src/coda/frontend/wallet
<< Replacing lastDefinitions for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Hooks.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/figitaki/src/coda/frontend/wallet/src/render/Hooks.re", "diagnostics": []}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re
type error here [1mFile "[1m", line 5, characters 4-12[0m[0m:
[1;31mError[0m: Unbound record field settings
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re", "diagnostics": [{"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 12}}, "message": "Error: Unbound record field settings", "severity": 1}]}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re
➡️ running bsc /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/components' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/common' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/main' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/__tests__' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/tablecloth-bucklescript/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-css/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/lib/bs/src/graphql-types' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/lib/bs' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-jest/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -ppx '/Users/figitaki/src/coda/frontend/wallet/node_modules/graphql_ppx/ppx' -ppx ''\''/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/reactjs_jsx_ppx_3.exe'\''' -ppx '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -warn-error @A -w -4-9-30-40-41-42-102 -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/SettingsProvider.ast with pwd /Users/figitaki/src/coda/frontend/wallet
<< Replacing lastDefinitions for file:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re", "diagnostics": []}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Footer.re
➡️ running bsc /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/components' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/common' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/main' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/__tests__' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/tablecloth-bucklescript/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-css/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/lib/bs/src/graphql-types' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/lib/bs' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-jest/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -ppx '/Users/figitaki/src/coda/frontend/wallet/node_modules/graphql_ppx/ppx' -ppx ''\''/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/reactjs_jsx_ppx_3.exe'\''' -ppx '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -warn-error @A -w -4-9-30-40-41-42-102 -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/Footer.ast with pwd /Users/figitaki/src/coda/frontend/wallet
<< Replacing lastDefinitions for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Footer.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Footer.re", "diagnostics": []}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Tc.re
➡️ running bsc /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/components' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/common' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/main' -I '/Users/figitaki/src/coda/frontend/wallet/lib/bs/__tests__' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-json/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/tablecloth-bucklescript/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-css/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/reason-apollo/lib/bs/src/graphql-types' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/reason-react/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/lib/bs' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-electron/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/@glennsl/bs-jest/lib/bs/src' -I '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -ppx '/Users/figitaki/src/coda/frontend/wallet/node_modules/graphql_ppx/ppx' -ppx ''\''/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/reactjs_jsx_ppx_3.exe'\''' -ppx '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -warn-error @A -w -4-9-30-40-41-42-102 -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/Tc.ast with pwd /Users/figitaki/src/coda/frontend/wallet
Ident!! String
Ident!! List
Ident!! Array
Ident!! Tablecloth
Ident!! Tablecloth.Task
Ident!! Tablecloth.Result
Ident!! Tablecloth.Option
<< Replacing lastDefinitions for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Tc.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/figitaki/src/coda/frontend/wallet/src/common/Tc.re", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re"}}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Footer.re"},"position":{"line":103,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Sending response {"id": 1, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 103, "character": 29}, "end": {"line": 103, "character": 40}}, "kind": 2}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","languageId":"reason","version":1,"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: settings |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re
type error here [1mFile "[1m", line 5, characters 4-12[0m[0m:
[1;31mError[0m: Unbound record field settings
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re", "diagnostics": [{"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 12}}, "message": "Error: Unbound record field settings", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":5,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0112056732178ms
Sending response {"id": 2, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Sending response {"id": 3, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":2},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: ettings |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":1},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: settings |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":3},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: ttings |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":2},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: ettings |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":4},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: tings |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":3},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: ttings |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":5},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: ings |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":4},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: tings |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":6},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: ngs |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":5},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: ings |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":7},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: gs |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":6},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: ngs |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":8},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: s |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":7},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: gs |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":9},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings:  |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":8},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: s |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":10},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":9},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings:  |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":11},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: > Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":10},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: |> Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":12},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings:  Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":11},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: > Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":13},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":12},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings:  Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Failed to refmt '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/refmt.exe' --print binary --recoverable --parse re > '/Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast'
/bin/sh: /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast: No such file or directory
Sending response {"id": 4, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0300407409668ms
Failed to refmt '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/refmt.exe' --print binary --recoverable --parse re > '/Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast'
/bin/sh: /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast: No such file or directory
Sending response {"id": 5, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":14},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption(),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":13},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":15},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption()s,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":15},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption()s,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":35},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0121593475342ms
Opens folkz > 0 
Package opens Pervasives
Package opens Pervasives
FINDING docs for module Impl(/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.cmti, /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli)
FINDING /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
Opens nows 1 file:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
---------------- LOCAL VAL
 - Completing in file:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
 -- not capitalized
Sending response {"id": 6, "jsonrpc": "2.0", "result": [{"label": "settings", "kind": 12, "detail": "Tc.Result.t(\n  [> `Decode_error of string | `Json_parse_error ],\n  Settings.t\n)", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re:3"}, {"label": "setSettings", "kind": 12, "detail": "Tc.Result.t(\n  [> `Decode_error of string | `Json_parse_error ],\n  Settings.t\n) => unit", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re:3"}, {"label": "sin", "kind": 12, "detail": "float => float", "documentation": "Sine. Argument is in radians.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:373"}, {"label": "stdout", "kind": 12, "detail": "out_channel", "documentation": "The standard output for the process.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:714"}, {"label": "set_binary_mode_in", "kind": 12, "detail": "(in_channel, bool) => unit", "documentation": "`set_binary_mode_in ic true` sets the channel `ic` to binary mode: no translations take place during input. `set_binary_mode_out ic false` sets the channel `ic` to text mode: depending on the operating system, some translations may take place during input. For instance, under Windows, end-of-lines will be translated from `\\r\\n` to `\\n`. This function has no effect under operating systems that do not distinguish between text mode and binary mode.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1034"}, {"label": "stdin", "kind": 12, "detail": "in_channel", "documentation": "The standard input for the process.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:711"}, {"label": "string_of_int", "kind": 12, "detail": "int => string", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:660"}, {"label": "stderr", "kind": 12, "detail": "out_channel", "documentation": "The standard error output for the process.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:717"}, {"label": "snd", "kind": 12, "detail": "(('a, 'b)) => 'b", "documentation": "Return the second component of a pair.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:688"}, {"label": "string_of_format", "kind": 12, "detail": "format6(\n  'a,\n  'b,\n  'c,\n  'd,\n  'e,\n  'f\n) => string", "documentation": "Converts a format string into a string.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1167"}, {"label": "seek_in", "kind": 12, "detail": "(in_channel, int) => unit", "documentation": "`seek_in chan pos` sets the current reading position to `pos` for channel `chan`. This works only for regular files. On files of other kinds, the behavior is unspecified.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1009"}, {"label": "string_of_float", "kind": 12, "detail": "float => string", "documentation": "Return the string representation of a floating-point number.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:674"}, {"label": "sqrt", "kind": 12, "detail": "float => float", "documentation": "Square root.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:346"}, {"label": "set_binary_mode_out", "kind": 12, "detail": "(out_channel, bool) => unit", "documentation": "`set_binary_mode_out oc true` sets the channel `oc` to binary mode: no translations take place during output. `set_binary_mode_out oc false` sets the channel `oc` to text mode: depending on the operating system, some translations may take place during output. For instance, under Windows, end-of-lines will be translated from `\\n` to `\\r\\n`. This function has no effect under operating systems that do not distinguish between text mode and binary mode.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:918"}, {"label": "string_of_bool", "kind": 12, "detail": "bool => string", "documentation": "Return the string representation of a boolean. As the returned values may be shared, the user should not modify them directly.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:649"}, {"label": "succ", "kind": 12, "detail": "int => int", "documentation": "`succ x` is `x + 1`.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:233"}, {"label": "sinh", "kind": 12, "detail": "float => float", "documentation": "Hyperbolic sine. Argument is in radians.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:407"}, {"label": "seek_out", "kind": 12, "detail": "(out_channel, int) => unit", "documentation": "`seek_out chan pos` sets the current writing position to `pos` for channel `chan`. This works only for regular files. On files of other kinds \\(such as terminals, pipes and sockets\\), the behavior is unspecified.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:891"}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":16},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption(),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":15},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption()s,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":17},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption(,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":16},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption(),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":18},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption(s,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":18},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption(s,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":34},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0162124633789ms
Opens folkz > 0 
Package opens Pervasives
Package opens Pervasives
FINDING docs for module Impl(/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.cmti, /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli)
FINDING /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
Opens nows 1 file:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
---------------- LOCAL VAL
 - Completing in file:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
 -- not capitalized
Sending response {"id": 7, "jsonrpc": "2.0", "result": [{"label": "settings", "kind": 12, "detail": "Tc.Result.t(\n  [> `Decode_error of string | `Json_parse_error ],\n  Settings.t\n)", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re:3"}, {"label": "setSettings", "kind": 12, "detail": "Tc.Result.t(\n  [> `Decode_error of string | `Json_parse_error ],\n  Settings.t\n) => unit", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re:3"}, {"label": "sin", "kind": 12, "detail": "float => float", "documentation": "Sine. Argument is in radians.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:373"}, {"label": "stdout", "kind": 12, "detail": "out_channel", "documentation": "The standard output for the process.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:714"}, {"label": "set_binary_mode_in", "kind": 12, "detail": "(in_channel, bool) => unit", "documentation": "`set_binary_mode_in ic true` sets the channel `ic` to binary mode: no translations take place during input. `set_binary_mode_out ic false` sets the channel `ic` to text mode: depending on the operating system, some translations may take place during input. For instance, under Windows, end-of-lines will be translated from `\\r\\n` to `\\n`. This function has no effect under operating systems that do not distinguish between text mode and binary mode.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1034"}, {"label": "stdin", "kind": 12, "detail": "in_channel", "documentation": "The standard input for the process.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:711"}, {"label": "string_of_int", "kind": 12, "detail": "int => string", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:660"}, {"label": "stderr", "kind": 12, "detail": "out_channel", "documentation": "The standard error output for the process.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:717"}, {"label": "snd", "kind": 12, "detail": "(('a, 'b)) => 'b", "documentation": "Return the second component of a pair.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:688"}, {"label": "string_of_format", "kind": 12, "detail": "format6(\n  'a,\n  'b,\n  'c,\n  'd,\n  'e,\n  'f\n) => string", "documentation": "Converts a format string into a string.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1167"}, {"label": "seek_in", "kind": 12, "detail": "(in_channel, int) => unit", "documentation": "`seek_in chan pos` sets the current reading position to `pos` for channel `chan`. This works only for regular files. On files of other kinds, the behavior is unspecified.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1009"}, {"label": "string_of_float", "kind": 12, "detail": "float => string", "documentation": "Return the string representation of a floating-point number.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:674"}, {"label": "sqrt", "kind": 12, "detail": "float => float", "documentation": "Square root.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:346"}, {"label": "set_binary_mode_out", "kind": 12, "detail": "(out_channel, bool) => unit", "documentation": "`set_binary_mode_out oc true` sets the channel `oc` to binary mode: no translations take place during output. `set_binary_mode_out oc false` sets the channel `oc` to text mode: depending on the operating system, some translations may take place during output. For instance, under Windows, end-of-lines will be translated from `\\n` to `\\r\\n`. This function has no effect under operating systems that do not distinguish between text mode and binary mode.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:918"}, {"label": "string_of_bool", "kind": 12, "detail": "bool => string", "documentation": "Return the string representation of a boolean. As the returned values may be shared, the user should not modify them directly.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:649"}, {"label": "succ", "kind": 12, "detail": "int => int", "documentation": "`succ x` is `x + 1`.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:233"}, {"label": "sinh", "kind": 12, "detail": "float => float", "documentation": "Hyperbolic sine. Argument is in radians.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:407"}, {"label": "seek_out", "kind": 12, "detail": "(out_channel, int) => unit", "documentation": "`seek_out chan pos` sets the current writing position to `pos` for channel `chan`. This works only for regular files. On files of other kinds \\(such as terminals, pipes and sockets\\), the behavior is unspecified.\n\n\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:891"}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":18},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption(s,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":18},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption(s,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":18},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption(s,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":18},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption(s,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":18},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption(s,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":18},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption(s,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":18},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption(s,\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":19},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Failed to refmt '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/refmt.exe' --print binary --recoverable --parse re > '/Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast'
/bin/sh: /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast: No such file or directory
Sending response {"id": 8, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0169277191162ms
Opens folkz > 0 
Package opens Pervasives
Package opens Pervasives
FINDING docs for module Impl(/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.cmti, /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli)
FINDING /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
Opens nows 1 file:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
---------------- LOCAL VAL
 - Completing in file:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
Sending response {"id": 9, "jsonrpc": "2.0", "result": [{"label": "SideBar", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "SettingsProvider", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "Send", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "SettingsRenderer", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "Settings", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "Single", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "SettingsMain", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "Set", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "Stack", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "Sys", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "Std_exit", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "Stream", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "String", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "Sort", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "StringLabels", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "StdLabels", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "Scanf", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":20},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Ssettings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":21},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":21},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":21},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0150203704834ms
Opens folkz > 0 
Package opens Pervasives
Package opens Pervasives
FINDING docs for module Impl(/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.cmti, /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli)
FINDING /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
Opens nows 1 file:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
Completing for SettingsProvider<.>
normal SettingsProvider.
Looking for env in file:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
Getting module SettingsProvider
FINDING docs for module Impl(/Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/SettingsProvider.cmt, /Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re)
FINDING /Users/figitaki/src/coda/frontend/wallet/lib/bs/src/render/SettingsProvider.cmt src /Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re
got it
Got the env
 - Completing in file:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re
 -- not capitalized
Sending response {"id": 10, "jsonrpc": "2.0", "result": [{"label": "context", "kind": 12, "detail": "React.Context.t(context)", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re:8"}, {"label": "initialContext", "kind": 12, "detail": "context", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re:6"}, {"label": "makeProps", "kind": 12, "detail": "(\n  ~value: context,\n  ~children: React.element,\n  ~?key: option(string),\n  unit\n) => Js.t(\n  < children : React.element; value : context >\n)", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re:13"}, {"label": "make", "kind": 12, "detail": "React.component(\n  Js.t(\n    < children : React.element; value : context >\n  )\n)", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re:10"}, {"label": "context", "kind": 22, "detail": "type context = {\n  settings: option(Settings.t),\n  setSettings: Settings.t => unit\n}", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re:1"}, {"label": "settings", "kind": 5, "detail": "settings: Settings.t option\n\ntype context = {\n  settings: option(Settings.t),\n  setSettings: Settings.t => unit\n}", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re:1"}, {"label": "setSettings", "kind": 5, "detail": "setSettings: Settings.t -> unit\n\ntype context = {\n  settings: option(Settings.t),\n  setSettings: Settings.t => unit\n}", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsProvider.re:1"}]}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":21}}}
>> Build system running: /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsb.exe -make-world
>>> stdout
[1/1] [34mBuilding[39m [2mBsElectron.cmi[22m
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
>>> stderr

Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/figitaki/src/coda/frontend/wallet/bsconfig.json", "diagnostics": []}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/App.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Body.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Main.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/IpcLinkRenderer.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsRenderer.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/TransactionsView.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Router.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/GraphqlMain.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/SettingsMain.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Page.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Window.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Route.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/ConsensusState.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Index.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/GraphqlLinkMessages.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/PublicKey.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Send.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Settings.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Preload.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/SideBar.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/IpcLinkMain.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Single.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/WalletItem.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Apollo.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/AppWindow.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/WalletList.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Header.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Modal.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/DaemonProcess.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/MainCommunication.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Context.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Messages.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Delete.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/AppTray.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ModalButtons.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/ProjectRoot.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/CallTable.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/RendererCommunication.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Wallet.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/Application.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Bindings.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/TransactionCell.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/__tests__/wallet_test.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Theme.re
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Failed to refmt '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/refmt.exe' --print binary --recoverable --parse re > '/Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast'
/bin/sh: /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast: No such file or directory
Sending response {"id": 11, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":3,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Failed to refmt '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/refmt.exe' --print binary --recoverable --parse re > '/Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast'
/bin/sh: /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast: No such file or directory
Sending response {"id": 12, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":22},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    \n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":21},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":23},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    O\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":23},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    O\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0200271606445ms
Opens folkz > 0 
Package opens Pervasives
Package opens Pervasives
FINDING docs for module Impl(/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.cmti, /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli)
FINDING /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
Opens nows 1 file:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
---------------- LOCAL VAL
 - Completing in file:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
Sending response {"id": 13, "jsonrpc": "2.0", "result": [{"label": "Open_rdonly", "kind": 4, "detail": "Open_rdonly\n\ntype open_flag = \n  | Open_rdonly\n  | Open_wronly\n  | Open_append\n  | Open_creat\n  | Open_trunc\n  | Open_excl\n  | Open_binary\n  | Open_text\n  | Open_nonblock\n", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1"}, {"label": "Open_wronly", "kind": 4, "detail": "Open_wronly\n\ntype open_flag = \n  | Open_rdonly\n  | Open_wronly\n  | Open_append\n  | Open_creat\n  | Open_trunc\n  | Open_excl\n  | Open_binary\n  | Open_text\n  | Open_nonblock\n", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1"}, {"label": "Open_append", "kind": 4, "detail": "Open_append\n\ntype open_flag = \n  | Open_rdonly\n  | Open_wronly\n  | Open_append\n  | Open_creat\n  | Open_trunc\n  | Open_excl\n  | Open_binary\n  | Open_text\n  | Open_nonblock\n", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1"}, {"label": "Open_creat", "kind": 4, "detail": "Open_creat\n\ntype open_flag = \n  | Open_rdonly\n  | Open_wronly\n  | Open_append\n  | Open_creat\n  | Open_trunc\n  | Open_excl\n  | Open_binary\n  | Open_text\n  | Open_nonblock\n", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1"}, {"label": "Open_trunc", "kind": 4, "detail": "Open_trunc\n\ntype open_flag = \n  | Open_rdonly\n  | Open_wronly\n  | Open_append\n  | Open_creat\n  | Open_trunc\n  | Open_excl\n  | Open_binary\n  | Open_text\n  | Open_nonblock\n", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1"}, {"label": "Open_excl", "kind": 4, "detail": "Open_excl\n\ntype open_flag = \n  | Open_rdonly\n  | Open_wronly\n  | Open_append\n  | Open_creat\n  | Open_trunc\n  | Open_excl\n  | Open_binary\n  | Open_text\n  | Open_nonblock\n", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1"}, {"label": "Open_binary", "kind": 4, "detail": "Open_binary\n\ntype open_flag = \n  | Open_rdonly\n  | Open_wronly\n  | Open_append\n  | Open_creat\n  | Open_trunc\n  | Open_excl\n  | Open_binary\n  | Open_text\n  | Open_nonblock\n", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1"}, {"label": "Open_text", "kind": 4, "detail": "Open_text\n\ntype open_flag = \n  | Open_rdonly\n  | Open_wronly\n  | Open_append\n  | Open_creat\n  | Open_trunc\n  | Open_excl\n  | Open_binary\n  | Open_text\n  | Open_nonblock\n", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1"}, {"label": "Open_nonblock", "kind": 4, "detail": "Open_nonblock\n\ntype open_flag = \n  | Open_rdonly\n  | Open_wronly\n  | Open_append\n  | Open_creat\n  | Open_trunc\n  | Open_excl\n  | Open_binary\n  | Open_text\n  | Open_nonblock\n", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1"}, {"label": "Obj", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "Oo", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":23},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    O\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":23},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    O\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":23},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    O\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":23},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    O\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":23},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    O\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":23},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    O\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":24},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    \n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":23},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    O\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":25},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n  \n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":24},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    \n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":26},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":25},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n  \n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":27},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n  \n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":26},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":28},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    \n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":27},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n  \n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":29},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    u\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":29},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    u\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0181198120117ms
Opens folkz > 0 
Package opens Pervasives
Package opens Pervasives
FINDING docs for module Impl(/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.cmti, /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli)
FINDING /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
Opens nows 1 file:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
---------------- LOCAL VAL
 - Completing in file:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
 -- not capitalized
Sending response {"id": 14, "jsonrpc": "2.0", "result": [{"label": "unsafe_really_input", "kind": 12, "detail": "(in_channel, bytes, int, int) => unit", "documentation": "No docs\n\nfile:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli:1217"}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":29},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    u\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":29},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    u\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":30},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    \n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":29},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    u\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":31},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    U\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":31},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    U\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0181198120117ms
Opens folkz > 0 
Package opens Pervasives
Package opens Pervasives
FINDING docs for module Impl(/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.cmti, /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli)
FINDING /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
Opens nows 1 file:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
---------------- LOCAL VAL
 - Completing in file:///Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/ocaml/pervasives.mli
Sending response {"id": 15, "jsonrpc": "2.0", "result": [{"label": "UnixLabels", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}, {"label": "Unix", "kind": 9, "detail": "file module", "documentation": "No docs\n\nwait for uri:1"}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":31},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    U\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":32},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Use\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":31},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    U\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":33},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Us\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":32},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Use\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":34},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    U\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":33},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    Us\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":35},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    \n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":34},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    U\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":36},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n  \n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":35},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    \n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":37},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":36},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n  \n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":38},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":37},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Failed to refmt '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/refmt.exe' --print binary --recoverable --parse re > '/Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast'
/bin/sh: /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast: No such file or directory
Sending response {"id": 16, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":38}}}
>> Build system running: /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsb.exe -make-world
>>> stdout
[1/1] [34mBuilding[39m [2mBsElectron.cmi[22m
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
>>> stderr

Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/figitaki/src/coda/frontend/wallet/bsconfig.json", "diagnostics": []}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/App.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Body.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Main.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/IpcLinkRenderer.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsRenderer.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/TransactionsView.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Router.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/GraphqlMain.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/SettingsMain.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Page.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Window.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Route.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/ConsensusState.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Index.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/GraphqlLinkMessages.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/PublicKey.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Send.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Settings.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Preload.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/SideBar.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/IpcLinkMain.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Single.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/WalletItem.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Apollo.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/AppWindow.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/WalletList.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Header.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Modal.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/DaemonProcess.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/MainCommunication.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Context.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Messages.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Delete.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/AppTray.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ModalButtons.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/ProjectRoot.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/CallTable.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/RendererCommunication.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Wallet.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/Application.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Bindings.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/TransactionCell.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/__tests__/wallet_test.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Theme.re
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Failed to refmt '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/refmt.exe' --print binary --recoverable --parse re > '/Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast'
/bin/sh: /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast: No such file or directory
Sending response {"id": 17, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":6,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Failed to refmt '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/refmt.exe' --print binary --recoverable --parse re > '/Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast'
/bin/sh: /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast: No such file or directory
Sending response {"id": 18, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Failed to refmt '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/refmt.exe' --print binary --recoverable --parse re > '/Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast'
/bin/sh: /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast: No such file or directory
Sending response {"id": 19, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0128746032715ms
Sending response {"id": 20, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 21, "character": 0}}, "newText": "[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};"}]}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Failed to refmt '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/refmt.exe' --print binary --recoverable --parse re > '/Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast'
/bin/sh: /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast: No such file or directory
Sending response {"id": 21, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.014066696167ms
Sending response {"id": 22, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 21, "character": 0}}, "newText": "[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};"}]}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Failed to refmt '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/refmt.exe' --print binary --recoverable --parse re > '/Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast'
/bin/sh: /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast: No such file or directory
Sending response {"id": 23, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":4,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Failed to refmt '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/refmt.exe' --print binary --recoverable --parse re > '/Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast'
/bin/sh: /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast: No such file or directory
Sending response {"id": 24, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":3,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Failed to refmt '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/refmt.exe' --print binary --recoverable --parse re > '/Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast'
/bin/sh: /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast: No such file or directory
Sending response {"id": 25, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":41},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n   let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":40},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":42},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n    let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":41},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n   let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":43},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n     let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":42},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n    let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":44},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n      let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":43},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n     let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":45},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n       let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":44},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n      let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":45}}}
>> Build system running: /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsb.exe -make-world
>>> stdout
[1/1] [34mBuilding[39m [2mBsElectron.cmi[22m
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
>>> stderr

Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/figitaki/src/coda/frontend/wallet/bsconfig.json", "diagnostics": []}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/App.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Body.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Main.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/IpcLinkRenderer.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsRenderer.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/TransactionsView.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Router.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/GraphqlMain.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/SettingsMain.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Page.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Window.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Route.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/ConsensusState.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Index.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/GraphqlLinkMessages.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/PublicKey.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Send.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Settings.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Preload.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/SideBar.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/IpcLinkMain.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Single.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/WalletItem.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Apollo.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/AppWindow.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/WalletList.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Header.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Modal.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/DaemonProcess.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/MainCommunication.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Context.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Messages.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Delete.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/AppTray.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ModalButtons.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/ProjectRoot.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/CallTable.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/RendererCommunication.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Wallet.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/Application.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Bindings.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/TransactionCell.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/__tests__/wallet_test.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Theme.re
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.0138282775879ms
Sending response {"id": 26, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 20, "character": 0}}, "newText": "[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};"}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":46},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":46},"contentChanges":[{"text":"[@react.component]\nlet make = () => {\n  let (settings, setSettings) = Hooks.useSettings();\n  let initialContext = {\n    SettingsProvider.settings: Tc.Result.toOption(settings),\n    setSettings: newSettings => {\n      setSettings(Ok(newSettings));\n    },\n  };\n  <SettingsProvider value=initialContext>\n    <ReasonApollo.Provider client=Apollo.client>\n      <Window>\n        <Header />\n        <Main> <SideBar /> <Router /> </Main>\n        <Footer />\n      </Window>\n    </ReasonApollo.Provider>\n  </SettingsProvider>;\n};\n"}]}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":3,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Failed to refmt '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/refmt.exe' --print binary --recoverable --parse re > '/Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast'
/bin/sh: /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast: No such file or directory
Sending response {"id": 27, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re","version":46}}}
>> Build system running: /Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/bsb.exe -make-world
>>> stdout
[1/1] [34mBuilding[39m [2mBsElectron.cmi[22m
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
ninja: no work to do.
>>> stderr

Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/figitaki/src/coda/frontend/wallet/bsconfig.json", "diagnostics": []}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/App.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Body.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Main.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/IpcLinkRenderer.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/SettingsRenderer.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/TransactionsView.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Router.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/GraphqlMain.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/SettingsMain.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Page.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Window.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Route.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/ConsensusState.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Index.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/GraphqlLinkMessages.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/PublicKey.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Send.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Settings.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Preload.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/SideBar.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/IpcLinkMain.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Single.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/WalletItem.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Apollo.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/AppWindow.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/WalletList.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/Header.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Modal.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/DaemonProcess.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/MainCommunication.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Context.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Messages.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Delete.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/AppTray.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/ModalButtons.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/ProjectRoot.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/CallTable.rei
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/RendererCommunication.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Wallet.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/main/Application.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Bindings.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/components/TransactionCell.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/__tests__/wallet_test.re
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/render/Theme.re
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"},"position":{"line":3,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Failed to refmt '/Users/figitaki/src/coda/frontend/wallet/node_modules/bs-platform/lib/refmt.exe' --print binary --recoverable --parse re > '/Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast'
/bin/sh: /Users/figitaki/src/coda/frontend/wallet/node_modules/.lsp/ReactApp.ast: No such file or directory
Sending response {"id": 28, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/common/Tc.re"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/common/Tc.re","languageId":"reason","version":1,"text":"// As suggested in https://github.com/darklang/tablecloth/commit/07cd22138c91dba4cb09a8976f13e5e86e72b90c\n// This module is our \"standard library\" an extension on top of Tablecloth\n\nmodule Caml = {\n  module String = String;\n  module List = List;\n  module Array = Array;\n};\n\ninclude (\n          Tablecloth:\n             (module type of Tablecloth) with\n              module Never := Tablecloth.Never and\n              module Task := Tablecloth.Task and\n              module Result := Tablecloth.Result and\n              module Option := Tablecloth.Option\n        );\n\nmodule Task = {\n  include Tablecloth.Task;\n\n  let return = a => succeed(a);\n\n  /// Take a `unit => Promise.t('a)`, make it into a `Task.t('x, 'a)`\n  let liftPromise = (f, ()) =>\n    f() |> Js.Promise.then_(a => Js.Promise.resolve(Belt.Result.Ok(a)));\n\n  /// Take a `unit => Promise.t('a)` which throws err, make it into a `Task.t(err, 'a)`\n  let liftErrorPromise = (f, ()) =>\n    f()\n    |> Js.Promise.then_(a => Js.Promise.resolve(Belt.Result.Ok(a)))\n    |> Js.Promise.catch(err => Js.Promise.resolve(Belt.Result.Error(err)));\n\n  let uncallbackifyValue = f => {\n    create(cb => f(a => cb(Belt.Result.Ok(a))));\n  };\n\n  /// Take a Node.js style ((nullable err) => unit) => unit function and make it\n  /// return a task instead\n  let uncallbackify0 = f => {\n    create(cb =>\n      f(err =>\n        switch (Js.Nullable.toOption(err)) {\n        | Some(err) => cb(Belt.Result.Error(err))\n        | None => cb(Belt.Result.Ok())\n        }\n      )\n    );\n  };\n\n  /// Take a Node.js style ((nullable err, nullable res) => unit) => unit\n  /// function and make it return a task instead\n  let uncallbackify = f => {\n    create(cb =>\n      f((err, x) =>\n        switch (Js.Nullable.toOption(err), Js.Nullable.toOption(x)) {\n        | (Some(err), _) => cb(Belt.Result.Error(err))\n        | (_, Some(x)) => cb(Belt.Result.Ok(x))\n        | (_, _) => failwith(\"The JS call you've bridged is funky\")\n        }\n      )\n    );\n  };\n};\n\nmodule Result = {\n  include Tablecloth.Result;\n\n  let map = (t, ~f) => map(f, t);\n  let andThen = (t, ~f) => andThen(~f, t);\n\n  let return = a => Belt.Result.Ok(a);\n  let fail = x => Belt.Result.Error(x);\n\n  let onError = (t: t('x, 'a), ~f) =>\n    switch (t) {\n    | Ok(v) => Belt.Result.Ok(v)\n    | Error(e) => f(e)\n    };\n\n  let ok_exn = (t: t(Js.Exn.t, 'a)): 'a => {\n    let string_of_str_option = s =>\n      switch (s) {\n      | None => \"None\"\n      | Some(s) => s\n      };\n\n    switch (t) {\n    | Ok(x) => x\n    | Error(e) =>\n      Js.Exn.raiseError(string_of_str_option(Js.Exn.stack(Obj.magic(e))))\n    };\n  };\n};\n\nmodule Option = {\n  include Tablecloth.Option;\n\n  let getExn = x => Belt.Option.getExn(x);\n\n  let map2 = (t1, t2, ~f) => {\n    switch (t1, t2) {\n    | (Some(a), Some(b)) => Some(f(a, b))\n    | _ => None\n    };\n  };\n};\n\nmodule Monad = {\n  module type S2 = {\n    type t('x, 'a);\n    let return: 'a => t('x, 'a);\n    let map: (t('x, 'a), ~f: 'a => 'b) => t('x, 'b);\n    let andThen: (t('x, 'a), ~f: 'a => t('x, 'b)) => t('x, 'b);\n  };\n\n  module Fail = {\n    module type S2 = {\n      include S2;\n      let fail: 'x => t('x, 'a);\n      let onError: (t('x, 'a), ~f: 'x => t('y, 'a)) => t('y, 'a);\n    };\n  };\n};\n"}}}
Running diagnostics for file:///Users/figitaki/src/coda/frontend/wallet/src/common/Tc.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/figitaki/src/coda/frontend/wallet/src/common/Tc.re", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/figitaki/src/coda/frontend/wallet/src/render/ReactApp.re"}}}
