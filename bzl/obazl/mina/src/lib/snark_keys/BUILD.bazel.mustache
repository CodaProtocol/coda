## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns",
)
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "string_flag")
load(
    "//:BUILD.bzl",
    "REPO_ARCHIVE_OPTS",
    "REPO_MODULE_OPTS",
    "REPO_NS_MODULE_OPTS",
)
load(
    ":BUILD.bzl",
    "PKG_ARCHIVE_OPTS",
    "PKG_MODULE_OPTS",
    "PKG_NS_MODULE_OPTS",
)

################################################################
## STANZA 1: LIBRARY SNARK_KEYS
################################################################
SNARK_KEYS_ARCHIVE_OPTS = REPO_ARCHIVE_OPTS + PKG_ARCHIVE_OPTS + []

SNARK_KEYS_NS_MODULE_OPTS = REPO_NS_MODULE_OPTS + PKG_NS_MODULE_OPTS

SNARK_KEYS_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:async",
    "@opam//pkg:core",
    "@mina//src/lib/transaction_snark",
    "@mina//src/lib/blockchain_snark",
]

##############
ocaml_archive(
    name = "snark_keys",
    opts = SNARK_KEYS_ARCHIVE_OPTS,
    visibility = ["//visibility:public"],
    deps = SNARK_KEYS_DEPS + [
        # do not sort (buildifier)
        ":_Snark_keys"
    ],
)

#########
ocaml_ns(
    name = "Snark_keys_ns",
    ns = "snark_keys",
    submodules = ["snark_keys.ml"]
)

#############
ocaml_module(
    name = "_Snark_keys",
    src = ":snark_keys.ml",
    opts = REPO_MODULE_OPTS + PKG_MODULE_OPTS,
    ppx = "@//bzl/ppx:ppx.exe[ppx_version][ppx_jane][ppx_deriving_yojson][bisect_ppx]",
    ppx_args = [
        # do not sort (buildifier)
        "--conditional",
        "-inline-test-lib",
        "snark_keys",
    ],
    deps = SNARK_KEYS_DEPS
)

################################################################
TOOL = "//src/lib/snark_keys/gen_keys:gen_keys.exe"
genrule(
    name = "gensrcs",
    outs = ["snark_keys.ml"],
    tools = [TOOL],
    cmd = "\n".join([
        "$(location {tool})".format(tool = TOOL),
        "cp snark_keys.ml \"$(RULEDIR)/\"",
    ]),
)

###################################################################
######## Configuration Settings - see :BUILD.bzl #################
bool_flag(
    name = "always-link",
    build_setting_default = False,
)

config_setting(
    name = "enable_always_link",
    flag_values = {":always-link": str(True)},
)

bool_flag(
    name = "debug",
    build_setting_default = True,
)

config_setting(
    name = "enable_debug",
    flag_values = {":debug": str(True)},
)

bool_flag(
    name = "threads",
    build_setting_default = True,
)

config_setting(
    name = "enable_threads",
    flag_values = {":threads": str(True)},
)

bool_flag(
    name = "tooling",
    build_setting_default = False,
)

config_setting(
    name = "enable_tooling",
    flag_values = {":tooling": str(True)},
)

bool_flag(
    name = "verbose",
    build_setting_default = False,
)

config_setting(
    name = "enable_verbose",
    flag_values = {":verbose": str(True)},
)

## PPX control
string_flag(
    name = "ppx-out",
    build_setting_default = "binary",
    values = [
        "binary",
        "text",
    ],
)

config_setting(
    name = "enable_ppx_output_format_text",
    flag_values = {":ppx-out": "text"},
)

config_setting(
    name = "enable_ppx_output_format_binary",
    flag_values = {":ppx-out": "binary"},
)
