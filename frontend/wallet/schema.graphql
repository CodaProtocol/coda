enum ConsensusStatus {
  SUBMITTED
  INCLUDED # Included in any block
  FINALIZED
  SNARKED
  FAILED
}

type ConsensusState {
  status: ConsensusStatus!
  estimatedPercentConfirmed: Float!
}

type Payment {
  nonce: Int!,
  submittedAt: String! @fake(type: pastDate)
  includedAt: String @fake(type: pastDate)
  from: String! @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"]) 
  to: String! @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
  amount: String! @fake(type: money)
  fee: String! @fake(type: money)
  memo: String @fake(type:hackerPhrase)
}

type PaymentUpdate {
  payment: Payment
  consensus: ConsensusState!
}

enum SyncStatus {
  ERROR
  BOOTSTRAP # Resyncing
  STALE # You haven't seen any activity recently
  SYNCED
}

type SyncUpdate {
  status: SyncStatus!
  estimatedPercentSynced: Float!
  description: String @examples(values: ["Sync description"])
}

type SnarkWorker {
  key: String! @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
  fee: String! @fake(type: money)
}

type SnarkFee {
  snarkCreator: String! @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
  fee: String! @fake(type: money)
}

type SnarkFeeUpdate {
  fee: SnarkFee
  consensus: ConsensusState!
}

type Block {
  coinbase: String! @fake(type: money)
  creator: String! @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
  payments: [Payment]!
  snarkFees: [SnarkFee]!
}

type BlockUpdate {
  block: Block!
  consensus: ConsensusState!
}

type AnnotatedBalance {
  total: String! @fake(type: money)
  unknown: String! @fake(type: money)
}

type Wallet {
  publicKey: String! @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
  nonce: String!
  receiptChainHash: String!
  delegate: String!
  vatingFor: String!
  balance: AnnotatedBalance!
}

type NodeStatus {
  network: String @examples(values: ["testnet"])
}

type Delegation {
  nonce: String!, @fake(type: number)
  submittedAt: String! @fake(type: pastDate)
  includedAt: String @fake(type: pastDate)
  from: String! @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
  to: String! @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
  fee: String!, @fake(type: money)
  memo: String @fake(type:hackerPhrase)
}

type DelegationUpdate {
  status: Delegation!

  # We may have reached consensus but still be waiting for the correct epoch
  active: Boolean!

  consensus: ConsensusState!
}

## Input types

input AddWalletInput {
  publicKey: String
  privateKey: String
}

input DeleteWalletInput {
  publicKey: String
}

input AddPaymentReceiptInput {
  receipt: String
}

input SetNetworkInput {
  address: String
}

input SetSnarkWorkerInput {
  worker: String!
  fee: String!
}

input CreatePaymentInput {
  from: String!,
  to: String!,
  amount: String!,
  fee: String!,
  memo: String
}

input PaymentFilterInput {
  toOrFrom: String,
}

input BlockFilterInput {
  creator: String,
}

input SetStakingInput {
  on: Boolean
}

input SetDelegationInput {
  from: String!
  to: String!
  fee: String!
  memo: String
}

## Payload types

type CreatePaymentPayload {
  payment: Payment
}

type SetSnarkWorkerPayload {
  worker: SnarkWorker
}

type SetNetworkPayload {
  address: String
}

type AddPaymentReceiptPayload {
  payment: Payment
}

type AddWalletPayload {
  publicKey: String @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
}

type DeleteWalletPayload {
  publicKey: String @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
}

type SetStakingPayload {
  on: Boolean
}

type SetDelegationPayload {
  delegation: Delegation
}

# Pagination types

type PageInfo {
  hasPreviousPage: Boolean! @examples(values: [false])
  hasNextPage: Boolean! @examples(values: [false])
}

type PaymentEdge {
  cursor: String
  node: PaymentUpdate
}

type PaymentConnection {
  edges: [PaymentEdge]
  nodes: [PaymentUpdate]
  pageInfo: PageInfo!
  totalCount: Int
}

type BlockEdge {
  cursor: String
  node: BlockUpdate
}

type BlockConnection {
  edges: [BlockEdge]
  nodes: [BlockUpdate]
  pageInfo: PageInfo!
  totalCount: Int
}

type Query {
  # List of wallets currently tracked by the node
  wallets: [Wallet!]!
  
  # Gets balance of key at a certain consensus state
  # Note: `consensus` is optional as we will likely decide one
  # state to be the "real" balance
  balance(publicKey: String!, consensus: ConsensusStatus): String!
  
  payments(
    filter: PaymentFilterInput,
    first: Int,
    after: String,
    last: Int,
    before: String): PaymentConnection
  
  blocks(
    filter: BlockFilterInput,
    first: Int,
    after: String,
    last: Int,
    before: String): BlockConnection
  
  # Null if node isn't performing snark work
  currentSnarkWorker: SnarkWorker

  # Current sync status of the node
  syncState: SyncUpdate!
  
  # version of the node (commit hash or version #)
  version: String! @examples(values: ["0.1.0"])
  
  # Network that the node is connected to
  network: String @examples(values: ["testnet"])
  status: NodeStatus
}

type Mutation {
  createPayment(input: CreatePaymentInput!): CreatePaymentPayload
  
  setSnarkWorker(input: SetSnarkWorkerInput!): SetSnarkWorkerPayload
  
  # Configure which network your node is connected to
  setNetwork(input: SetNetworkInput!): SetNetworkPayload
  
  # Adds transaction to the node (note: Not sure how we want to represent this yet)
  addPaymentReceipt(input: AddPaymentReceiptInput!): AddPaymentReceiptPayload
  
  # Tell server to track a private key and all associated transactions
  addWallet(input: AddWalletInput!): AddWalletPayload
  
  # Deletes private key associated with `key` and all related information
  deleteWallet(input: DeleteWalletInput!): DeleteWalletPayload

  setStaking(input: SetStakingInput!): SetStakingPayload
  setDelegation(input: SetDelegationInput!): SetDelegationPayload
}

type Subscription {
  # Subscribe to sync status of the node
  newSyncUpdate: SyncUpdate!
  
  # Subscribe to payments for which this key is the sender or receiver
  newPaymentUpdate(filterBySenderOrReceiver: String!): PaymentUpdate!
  
  # Subscribe all blocks created by `key`
  newBlock(key: String): BlockUpdate!
  
  # Subscribe to fees earned by key
  newSnarkFee(key: String): SnarkFee!
  
  newDelegationUpdate(publicKey: String): DelegationUpdate!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
