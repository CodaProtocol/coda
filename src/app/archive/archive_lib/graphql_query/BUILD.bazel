## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns",
    "ppx_executable",
)
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "string_flag")
load(
    "//:BUILD.bzl",
    "REPO_ARCHIVE_OPTS",
    "REPO_MODULE_OPTS",
    "REPO_NS_MODULE_OPTS",
    "REPO_PPX_EXECUTABLE_OPTS",
)
load(
    ":BUILD.bzl",
    "PKG_ARCHIVE_OPTS",
    "PKG_MODULE_OPTS",
    "PKG_NS_MODULE_OPTS",
    "PKG_PPX_EXECUTABLE_OPTS",
)

################################################################
## STANZA 1: LIBRARY GRAPHQL_QUERY
################################################################
GRAPHQL_QUERY_ARCHIVE_OPTS = REPO_ARCHIVE_OPTS + PKG_ARCHIVE_OPTS + []

GRAPHQL_QUERY_MODULE_OPTS = REPO_MODULE_OPTS + PKG_MODULE_OPTS

GRAPHQL_QUERY_NS_MODULE_OPTS = REPO_NS_MODULE_OPTS + PKG_NS_MODULE_OPTS

GRAPHQL_QUERY_PPX_EXECUTABLE_OPTS = REPO_PPX_EXECUTABLE_OPTS + PKG_PPX_EXECUTABLE_OPTS

GRAPHQL_QUERY_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:core",
    "@mina//src/lib/coda_base",
    "@mina//src/lib/coda_transition",
    "@mina//src/lib/graphql_lib",
]

SCHEMA_FILE = "/src/app/archive/archive_graphql_schema.json"

##############
ocaml_archive(
    name = "graphql_query",
    opts = GRAPHQL_QUERY_ARCHIVE_OPTS,
    visibility = ["//visibility:public"],
    deps = GRAPHQL_QUERY_DEPS + [
        # do not sort (buildifier)
        ":_Base_types",
        ":_Blocks",
        ":_Clear_data",
        ":_Fee_transfers",
        ":_Graphql_query",
        ":_Public_keys",
        ":_User_commands",
    ],
)

#########
ocaml_ns(
    name = "Graphql_query_ns",
    ns = "graphql_query",
    opts = GRAPHQL_QUERY_NS_MODULE_OPTS,
    submodules = [
        # do not sort (buildifier)
        "base_types.ml",
        "blocks.ml",
        "clear_data.ml",
        "fee_transfers.ml",
        "graphql_query.ml",
        "public_keys.ml",
        "user_commands.ml",
    ],
)

#############
ocaml_module(
    name = "_Base_types",
    src = "base_types.ml",
    ns = ":Graphql_query_ns",
    opts = GRAPHQL_QUERY_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-schema",
        "src/app/archive/archive_graphql_schema.json",
        "--conditional",
        "-inline-test-lib",
        "graphql_query",
    ],
    ## ppx_data = [SCHEMA_FILE],
    deps = GRAPHQL_QUERY_DEPS,
)

#############
ocaml_module(
    name = "_Blocks",
    src = "blocks.ml",
    ns = ":Graphql_query_ns",
    opts = GRAPHQL_QUERY_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-schema={}".format( SCHEMA_FILE ),
        "--conditional",
        "-inline-test-lib",
        "graphql_query",
    ],
    # ## ppx_data = [SCHEMA_FILE],
    deps = GRAPHQL_QUERY_DEPS,
)

#############
ocaml_module(
    name = "_Clear_data",
    src = "clear_data.ml",
    ns = ":Graphql_query_ns",
    opts = GRAPHQL_QUERY_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-schema={}".format( SCHEMA_FILE ),
        "--conditional",
        "-inline-test-lib",
        "graphql_query",
    ],
    ## ppx_data = [SCHEMA_FILE],
    deps = GRAPHQL_QUERY_DEPS,
)

#############
ocaml_module(
    name = "_Fee_transfers",
    src = "fee_transfers.ml",
    ns = ":Graphql_query_ns",
    opts = GRAPHQL_QUERY_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-schema={}".format( SCHEMA_FILE ),
        "--conditional",
        "-inline-test-lib",
        "graphql_query",
    ],
    ## ppx_data = [SCHEMA_FILE],
    deps = GRAPHQL_QUERY_DEPS + [":_Base_types"] # obazl:retain
)

#############
ocaml_module(
    name = "_Graphql_query",
    src = "graphql_query.ml",
    ns = ":Graphql_query_ns",
    opts = GRAPHQL_QUERY_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-schema={}".format( SCHEMA_FILE ),
        "--conditional",
        "-inline-test-lib",
        "graphql_query",
    ],
    ## ppx_data = [SCHEMA_FILE],
    deps = GRAPHQL_QUERY_DEPS + [
        # do not sort (buildifier)
        ":_Base_types",
        ":_Blocks",
        ":_Fee_transfers",
        ":_Public_keys",
        ":_User_commands",
    ],
)

#############
ocaml_module(
    name = "_Public_keys",
    src = "public_keys.ml",
    ns = ":Graphql_query_ns",
    opts = GRAPHQL_QUERY_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-schema={}".format( SCHEMA_FILE ),
        "--conditional",
        "-inline-test-lib",
        "graphql_query",
    ],
    ## ppx_data = [SCHEMA_FILE],
    deps = GRAPHQL_QUERY_DEPS,
)

#############
ocaml_module(
    name = "_User_commands",
    src = "user_commands.ml",
    ns = ":Graphql_query_ns",
    opts = GRAPHQL_QUERY_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-schema=/src/app/archive/archive_graphql_schema.json",
        "--conditional",
        "-inline-test-lib",
        "graphql_query",
    ],
    ## ppx_data = [SCHEMA_FILE],
    deps = GRAPHQL_QUERY_DEPS + [":_Base_types"] # obazl:retain
)

###############
ppx_executable(
    name = "ppx1.exe",
    lazy_deps = [
        "@opam//pkg:ppx_expect.collector",
        "@opam//pkg:ppx_hash.runtime-lib",
        "@opam//pkg:ppx_sexp_conv.runtime-lib",
        "@opam//pkg:ppx_assert.runtime-lib",
        "@opam//pkg:ppx_compare.runtime-lib",
        "@opam//pkg:ppx_inline_test.runtime-lib",
        "@opam//pkg:ppx_bench.runtime-lib",
        "@opam//pkg:ppx_enumerate.runtime-lib",
        "@opam//pkg:ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx:Driver",
    opts = GRAPHQL_QUERY_PPX_EXECUTABLE_OPTS,
    visibility = [
        "//src/app/archive/archive_lib/graphql_query:__pkg__",
    ],
    deps = [
        "@graphql_ppx//src/native:graphql_ppx",
        "@opam//pkg:ppx_jane",
        "@opam//pkg:ppxlib",
        "@opam//pkg:bisect_ppx",
        "@ppx_version//src:ppx_version",
    ],
)
###################################################################
######## Configuration Settings - see :BUILD.bzl #################
bool_flag(
    name = "always-link",
    build_setting_default = False,
)

config_setting(
    name = "enable_always_link",
    flag_values = {":always-link": str(True)},
)

bool_flag(
    name = "debug",
    build_setting_default = True,
)

config_setting(
    name = "enable_debug",
    flag_values = {":debug": str(True)},
)

bool_flag(
    name = "threads",
    build_setting_default = True,
)

config_setting(
    name = "enable_threads",
    flag_values = {":threads": str(True)},
)

bool_flag(
    name = "tooling",
    build_setting_default = False,
)

config_setting(
    name = "enable_tooling",
    flag_values = {":tooling": str(True)},
)

bool_flag(
    name = "verbose",
    build_setting_default = False,
)

config_setting(
    name = "enable_verbose",
    flag_values = {":verbose": str(True)},
)

## PPX control
string_flag(
    name = "ppx-out",
    build_setting_default = "binary",
    values = [
        "binary",
        "text",
    ],
)

config_setting(
    name = "enable_ppx_output_format_text",
    flag_values = {":ppx-out": "text"},
)

config_setting(
    name = "enable_ppx_output_format_binary",
    flag_values = {":ppx-out": "binary"},
)
