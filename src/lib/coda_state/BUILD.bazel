## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_interface",
    "ocaml_module",
    "ocaml_ns",
    "ppx_executable",
)
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "string_flag")
load(
    "//:BUILD.bzl",
    "REPO_ARCHIVE_OPTS",
    "REPO_INTERFACE_OPTS",
    "REPO_MODULE_OPTS",
    "REPO_NS_MODULE_OPTS",
    "REPO_PPX_EXECUTABLE_OPTS",
    "REPO_PPX_RUNTIME_DATA",
)
load(
    ":BUILD.bzl",
    "PKG_ARCHIVE_OPTS",
    "PKG_INTERFACE_OPTS",
    "PKG_MODULE_OPTS",
    "PKG_NS_MODULE_OPTS",
    "PKG_PPX_EXECUTABLE_OPTS",
)

THIS_PPX_EXECUTABLE_OPTS = REPO_PPX_EXECUTABLE_OPTS + PKG_PPX_EXECUTABLE_OPTS

################################################################
## STANZA 1: LIBRARY CODA_STATE
################################################################
CODA_STATE_INTERFACE_OPTS = REPO_INTERFACE_OPTS + PKG_INTERFACE_OPTS

CODA_STATE_MODULE_OPTS = REPO_MODULE_OPTS + PKG_MODULE_OPTS

CODA_STATE_ARCHIVE_OPTS = REPO_ARCHIVE_OPTS + PKG_ARCHIVE_OPTS + []

CODA_STATE_NS_MODULE_OPTS = REPO_NS_MODULE_OPTS + PKG_NS_MODULE_OPTS

CODA_STATE_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:core_kernel",
    "@mina//src/lib/coda_base",
    "@mina//src/lib/snark_params",
    "@mina//src/lib/consensus",
    "@mina//src/lib/test_genesis_ledger",
    "@snarky//bitstring_lib",
    "@snarky//fold_lib",
    "@snarky//tuple_lib",
    "@mina//src/lib/with_hash",
]

##############
ocaml_archive(
    name = "coda_state",
    opts = CODA_STATE_ARCHIVE_OPTS,
    visibility = ["//visibility:public"],
    deps = CODA_STATE_DEPS + [
        # do not sort (buildifier)
        ":_Ancestor",
        ":_Blockchain_state",
        ":_Consensus_state_hooks",
        ":_Genesis_protocol_state",
        ":_Protocol_state",
        ":_Snark_transition",
    ],
)

#########
ocaml_ns(
    name = "Coda_state_ns",
    ns = "coda_state",
    opts = CODA_STATE_NS_MODULE_OPTS,
    submodules = [
        # do not sort (buildifier)
        "ancestor.ml",
        "blockchain_state.ml",
        "consensus_state_hooks.ml",
        "genesis_protocol_state.ml",
        "protocol_state.ml",
        "snark_transition.ml",
    ],
)

#############
ocaml_module(
    name = "_Ancestor",
    src = "ancestor.ml",
    ns = ":Coda_state_ns",
    opts = CODA_STATE_MODULE_OPTS,
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "--conditional",
        "-inline-test-lib",
        "coda_state",
    ],
    ppx_data = REPO_PPX_RUNTIME_DATA,
    deps = CODA_STATE_DEPS + [
        # do not sort (buildifier)
        ":_Protocol_state",
    ],
)

#############
ocaml_module(
    name = "_Blockchain_state",
    src = "blockchain_state.ml",
    intf = ":_Blockchain_state.cmi",
    ns = ":Coda_state_ns",
    opts = CODA_STATE_MODULE_OPTS,
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "--conditional",
        "-inline-test-lib",
        "coda_state",
    ],
    ppx_data = REPO_PPX_RUNTIME_DATA,
    deps = CODA_STATE_DEPS,
)

################
ocaml_interface(
    name = "_Blockchain_state.cmi",
    src = "blockchain_state.mli",
    ns = ":Coda_state_ns",
    opts = CODA_STATE_INTERFACE_OPTS,
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "--conditional",
        "-inline-test-lib",
        "coda_state",
    ],
    ppx_data = REPO_PPX_RUNTIME_DATA,
    deps = CODA_STATE_DEPS,
)

#############
ocaml_module(
    name = "_Consensus_state_hooks",
    src = "consensus_state_hooks.ml",
    intf = ":_Consensus_state_hooks.cmi",
    ns = ":Coda_state_ns",
    opts = CODA_STATE_MODULE_OPTS,
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "--conditional",
        "-inline-test-lib",
        "coda_state",
    ],
    ppx_data = REPO_PPX_RUNTIME_DATA,
    deps = CODA_STATE_DEPS + [
        # do not sort (buildifier)
        ":_Blockchain_state",
        ":_Protocol_state",
        ":_Snark_transition",
    ],
)

################
ocaml_interface(
    name = "_Consensus_state_hooks.cmi",
    src = "consensus_state_hooks.mli",
    ns = ":Coda_state_ns",
    opts = CODA_STATE_INTERFACE_OPTS,
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "--conditional",
        "-inline-test-lib",
        "coda_state",
    ],
    ppx_data = REPO_PPX_RUNTIME_DATA,
    deps = CODA_STATE_DEPS + [
        # do not sort (buildifier)
        ":_Blockchain_state",
        ":_Protocol_state",
        ":_Snark_transition",
    ],
)

#############
ocaml_module(
    name = "_Genesis_protocol_state",
    src = "genesis_protocol_state.ml",
    intf = ":_Genesis_protocol_state.cmi",
    ns = ":Coda_state_ns",
    opts = CODA_STATE_MODULE_OPTS,
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "--conditional",
        "-inline-test-lib",
        "coda_state",
    ],
    ppx_data = REPO_PPX_RUNTIME_DATA,
    deps = CODA_STATE_DEPS + [
        # do not sort (buildifier)
        ":_Blockchain_state",
        ":_Protocol_state",
    ],
)

################
ocaml_interface(
    name = "_Genesis_protocol_state.cmi",
    src = "genesis_protocol_state.mli",
    ns = ":Coda_state_ns",
    opts = CODA_STATE_INTERFACE_OPTS,
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "--conditional",
        "-inline-test-lib",
        "coda_state",
    ],
    ppx_data = REPO_PPX_RUNTIME_DATA,
    deps = CODA_STATE_DEPS + [
        # do not sort (buildifier)
        ":_Protocol_state",
    ],
)

#############
ocaml_module(
    name = "_Protocol_state",
    src = "protocol_state.ml",
    intf = ":_Protocol_state.cmi",
    ns = ":Coda_state_ns",
    opts = CODA_STATE_MODULE_OPTS,
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "--conditional",
        "-inline-test-lib",
        "coda_state",
    ],
    ppx_data = REPO_PPX_RUNTIME_DATA,
    deps = CODA_STATE_DEPS + [
        # do not sort (buildifier)
        ":_Blockchain_state",
    ],
)

################
ocaml_interface(
    name = "_Protocol_state.cmi",
    src = "protocol_state.mli",
    ns = ":Coda_state_ns",
    opts = CODA_STATE_INTERFACE_OPTS,
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "--conditional",
        "-inline-test-lib",
        "coda_state",
    ],
    ppx_data = REPO_PPX_RUNTIME_DATA,
    deps = CODA_STATE_DEPS + [
        # do not sort (buildifier)
        ":_Blockchain_state",
    ],
)

#############
ocaml_module(
    name = "_Snark_transition",
    src = "snark_transition.ml",
    intf = ":_Snark_transition.cmi",
    ns = ":Coda_state_ns",
    opts = CODA_STATE_MODULE_OPTS,
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "--conditional",
        "-inline-test-lib",
        "coda_state",
    ],
    ppx_data = REPO_PPX_RUNTIME_DATA,
    deps = CODA_STATE_DEPS + [
        # do not sort (buildifier)
        ":_Blockchain_state",
    ],
)

################
ocaml_interface(
    name = "_Snark_transition.cmi",
    src = "snark_transition.mli",
    ns = ":Coda_state_ns",
    opts = CODA_STATE_INTERFACE_OPTS,
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
        "--conditional",
        "-inline-test-lib",
        "coda_state",
    ],
    ppx_data = REPO_PPX_RUNTIME_DATA,
    deps = CODA_STATE_DEPS + [
        # do not sort (buildifier)
        ":_Blockchain_state",
    ],
)

###################################################################
######## Configuration Settings - see :BUILD.bzl #################
bool_flag(
    name = "always-link",
    build_setting_default = False,
)

config_setting(
    name = "enable_always_link",
    flag_values = {":always-link": str(True)},
)

bool_flag(
    name = "debug",
    build_setting_default = True,
)

config_setting(
    name = "enable_debug",
    flag_values = {":debug": str(True)},
)

bool_flag(
    name = "threads",
    build_setting_default = True,
)

config_setting(
    name = "enable_threads",
    flag_values = {":threads": str(True)},
)

bool_flag(
    name = "tooling",
    build_setting_default = False,
)

config_setting(
    name = "enable_tooling",
    flag_values = {":tooling": str(True)},
)

bool_flag(
    name = "verbose",
    build_setting_default = False,
)

config_setting(
    name = "enable_verbose",
    flag_values = {":verbose": str(True)},
)

## PPX control
string_flag(
    name = "ppx-out",
    build_setting_default = "binary",
    values = [
        "binary",
        "text",
    ],
)

config_setting(
    name = "enable_ppx_output_format_text",
    flag_values = {":ppx-out": "text"},
)

config_setting(
    name = "enable_ppx_output_format_binary",
    flag_values = {":ppx-out": "binary"},
)

###############
ppx_executable(
    name = "ppx.exe",
    lazy_deps = [
        "@opam//pkg:yojson",
        "@opam//pkg:ppx_hash.runtime-lib",
        "@opam//pkg:ppx_deriving_yojson.runtime",
        "@opam//pkg:ppx_sexp_conv.runtime-lib",
        "@opam//pkg:ppx_deriving.runtime",
        "@opam//pkg:ppx_assert.runtime-lib",
        "@opam//pkg:ppx_compare.runtime-lib",
        "@opam//pkg:ppx_inline_test.runtime-lib",
        "@opam//pkg:bin_prot",
        "@opam//pkg:fieldslib",
        "@opam//pkg:bisect_ppx.runtime",
    ],
    main = "//bzl/ppx:driver",
    opts = THIS_PPX_EXECUTABLE_OPTS,
    visibility = [
        "//src/lib/coda_state:__pkg__",
    ],
    deps = [
        "@mina//src/lib/ppx_coda",
        "@opam//pkg:bisect_ppx",
        "@opam//pkg:ppx_assert",
        "@opam//pkg:ppx_bin_prot",
        "@opam//pkg:ppx_compare",
        "@opam//pkg:ppx_custom_printf",
        "@opam//pkg:ppx_deriving.std",
        "@opam//pkg:ppx_deriving_yojson",
        "@opam//pkg:ppx_fields_conv",
        "@opam//pkg:ppx_hash",
        "@opam//pkg:ppx_inline_test",
        "@opam//pkg:ppx_let",
        "@opam//pkg:ppx_sexp_conv",
        "@ppx_optcomp//src:ppx_optcomp",
        "@ppx_version//src:ppx_version",
        "@snarky//h_list/ppx:ppx_h_list",
        "@snarky//ppx:ppx_snarky",
    ],
)
