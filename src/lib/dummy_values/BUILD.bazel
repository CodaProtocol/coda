## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.

load("@obazl_rules_ocaml//ocaml:rules.bzl",
     "ocaml_archive",
     "ocaml_module",
     "ocaml_ns"
)
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "string_flag")
load("//:BUILD.bzl",
     "REPO_ARCHIVE_OPTS",
     "REPO_NS_MODULE_OPTS",
     "REPO_MODULE_OPTS"
)
load(":BUILD.bzl",
     "PKG_ARCHIVE_OPTS",
     "PKG_NS_MODULE_OPTS",
     "PKG_MODULE_OPTS"
)


################################################################
## STANZA 1: LIBRARY DUMMY_VALUES
################################################################
DUMMY_VALUES_ARCHIVE_OPTS = REPO_ARCHIVE_OPTS + PKG_ARCHIVE_OPTS + []
DUMMY_VALUES_NS_MODULE_OPTS = REPO_NS_MODULE_OPTS + PKG_NS_MODULE_OPTS

DUMMY_VALUES_DEPS = [
        # do not sort (buildifier)
          "@mina//src/lib/crypto_params",
          "@snarky//src/base:snarky_backendless",
]

DUMMY_VALUES_PPX = "@//bzl/ppx:ppx.exe[ppx_version][ppx_jane][ppxlib.metaquot][bisect_ppx]"
DUMMY_VALUES_PPX_ARGS = [
       # do not sort (buildifier)
        "--conditional", "-inline-test-lib", "dummy_values"
 ]

##############
ocaml_archive(
    name = "dummy_values",
    opts = DUMMY_VALUES_ARCHIVE_OPTS,
    visibility = ["//visibility:public"],
    deps = DUMMY_VALUES_DEPS + [
        # do not sort (buildifier)
        ":_Dummy_values"
    ],
)

#########
ocaml_ns(
    name = "Dummy_values_ns",
    ns="dummy_values",
    submodules = ["dummy_values.ml"]

)

###################################################################
######## Configuration Settings - see :BUILD.bzl #################
bool_flag( name = "always-link", build_setting_default = False )
config_setting(name = "enable_always_link", flag_values = {":always-link": str(True)})

bool_flag( name = "debug", build_setting_default = True )
config_setting(name = "enable_debug", flag_values = {":debug": str(True)})

bool_flag( name = "threads", build_setting_default = True )
config_setting(name = "enable_threads", flag_values = {":threads": str(True)})

bool_flag( name = "tooling", build_setting_default = False )
config_setting(name = "enable_tooling", flag_values = {":tooling": str(True)})

bool_flag( name = "verbose", build_setting_default = False )
config_setting(name = "enable_verbose", flag_values = {":verbose": str(True)})

## PPX control
string_flag( name = "ppx-out", build_setting_default = "binary", values = ["binary", "text"])
config_setting( name = "enable_ppx_output_format_text",   flag_values = { ":ppx-out": "text" })
config_setting( name = "enable_ppx_output_format_binary", flag_values = { ":ppx-out": "binary" })
################################################################

#############
ocaml_module(
    name = "_Dummy_values",
    src = ":dummy_values.ml",
    ns  = ":Dummy_values_ns",
    opts = REPO_MODULE_OPTS + PKG_MODULE_OPTS,
    ppx = "@//bzl/ppx:ppx.exe[ppx_version][ppx_jane][ppxlib.metaquot][bisect_ppx]",
    ppx_args = [
        # do not sort (buildifier)
        "--conditional",
        "-inline-test-lib",
        "dummy_values",
    ],
    deps = [
        "@mina//src/lib/crypto_params",
        "@snarky//src/base:snarky_backendless",
    ],
)

TOOL = "//src/lib/dummy_values/gen_values:gen_values.exe"

genrule(
    name = "gensrcs",
    outs = ["dummy_values.ml"],
    cmd = "\n".join([
        "$(location {tool})".format(tool = TOOL),
        "cp dummy_values.ml \"$@\"",
    ]),
    tools = [TOOL],
)
