(* test_make.ml -- tests Merkle mask connected to underlying Merkle tree *)

open Core
open Test_stubs

let%test_module "Test mask connected to underlying Merkle tree" =
      ( module struct

        module Database = Merkle_ledger.Database

        module type Test_intf = sig
          val depth : int

          module type Masked_db =
            Merkle_mask.Maskable_merkle_tree_intf
            with type key := Key.t
             and type account := Account.t
             and type hash := Hash.t
 
          (*          module MT : Masked_db *)

                                (*          val with_instance : ((module Masked_db with type t = MT.t) -> MT.t -> 'a) -> 'a *)
        end

        module Make (Test : Test_intf) = struct
        end
                              
        module Make_db_and_mask (Depth : sig
                     val depth : int
                   end) =
          Make
            (struct
              let depth = Depth.depth

              module type Masked_db =
                Merkle_mask.Maskable_merkle_tree_intf
                with type key := Key.t
                 and type account := Account.t
                 and type hash := Hash.t

              module Location = Merkle_ledger.Location.Make (Depth)
                        
              module Base_db : sig
                include Merkle_ledger.Database_intf.S
                        with module Addr := Location.Addr
                        with type account := Account.t
                         and type hash := Hash.t
                         and type key := Key.t
                         and type location := Location.t
              end = Database.Make (Key) (Account) (Hash) (Depth) (Location) (In_memory_kvdb)
                      (In_memory_sdb)
                      (Storage_locations)
                         
              module Maskable = Merkle_mask.Make_maskable_merkle_tree (Key) (Account) (Hash) (Location) (Base_db)

              module Mask = Merkle_mask.Make_masking_merkle_tree (Key) (Account) (Hash) (Location) (Maskable)

              
                          
              let instance : (f:(module Masked_db with type t = MT.t) -> MT.t -> 'a) -> 'a =
                let mdb = MT.create () in

              let with_instance (                          
            end)
        end)
