## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns",
)
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "string_flag")
load(
    "//:BUILD.bzl",
    "REPO_ARCHIVE_OPTS",
    "REPO_MODULE_OPTS",
    "REPO_NS_MODULE_OPTS",
)
load(
    ":BUILD.bzl",
    "PKG_ARCHIVE_OPTS",
    "PKG_MODULE_OPTS",
    "PKG_NS_MODULE_OPTS",
)

################################################################
## STANZA 1: LIBRARY ROCKSDB
################################################################
ROCKSDB_MODULE_OPTS = REPO_MODULE_OPTS + PKG_MODULE_OPTS

ROCKSDB_ARCHIVE_OPTS = REPO_ARCHIVE_OPTS + PKG_ARCHIVE_OPTS + ["-linkall"]

ROCKSDB_NS_MODULE_OPTS = REPO_NS_MODULE_OPTS + PKG_NS_MODULE_OPTS

ROCKSDB_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:core",
    "@mina//src/external/ocaml-rocksdb:rocks",
    "@mina//src/lib/key_value_database",
    "@mina//src/lib/file_system",
    "@mina//src/lib/logger",
]

ROCKSDB_PPX = "@//bzl/ppx:ppx.exe[ppx_version][ppx_jane][bisect_ppx]"

ROCKSDB_PPX_ARGS = [
    # do not sort (buildifier)
    "--conditional",
    "-inline-test-lib",
    "rocksdb",
]

##############
ocaml_archive(
    name = "rocksdb",
    doc = "RocksDB Database module",
    opts = ROCKSDB_ARCHIVE_OPTS,
    visibility = ["//visibility:public"],
    deps = ROCKSDB_DEPS + [
        # do not sort (buildifier)
        ":_Database",
        ":_Serializable",
    ],
    cc_deps = {
        "//bzl/external/bzip2": "static",    # -lbz2
        "//bzl/external/zlib": "default"     # -lz
    },
    cc_linkall  = ["//bzl/external/rocksdb"], # -Wl,-force_load (MacOS) or -whole-archive (Linux)
    cc_linkopts = select({
        "//bzl/host:macos": ["-lc++abi", "-lc++"],
        "//bzl/host:linux": ["-lstdc++"],
    }, no_match_error = "Unsupported platform. Only Linux and MacOS supported.")
)

#########
ocaml_ns(
    name = "Rocksdb_ns",
    ns = "rocksdb",
    opts = ROCKSDB_NS_MODULE_OPTS,
    submodules = [
        # do not sort (buildifier)
        "database.ml",
        "serializable.ml",
    ],
)

#############
ocaml_module(
    name = "_Database",
    src = "database.ml",
    ns = ":Rocksdb_ns",
    opts = ROCKSDB_MODULE_OPTS,
    ppx = ROCKSDB_PPX,
    ppx_args = ROCKSDB_PPX_ARGS,
    deps = ROCKSDB_DEPS,
)

#############
ocaml_module(
    name = "_Serializable",
    src = "serializable.ml",
    ns = ":Rocksdb_ns",
    opts = ROCKSDB_MODULE_OPTS,
    ppx = ROCKSDB_PPX,
    ppx_args = ROCKSDB_PPX_ARGS,
    deps = ROCKSDB_DEPS + [
        # do not sort (buildifier)
        ":_Database",
    ],
)

###################################################################
######## Configuration Settings - see :BUILD.bzl #################
bool_flag(
    name = "always-link",
    build_setting_default = False,
)

config_setting(
    name = "enable_always_link",
    flag_values = {":always-link": str(True)},
)

bool_flag(
    name = "debug",
    build_setting_default = True,
)

config_setting(
    name = "enable_debug",
    flag_values = {":debug": str(True)},
)

bool_flag(
    name = "threads",
    build_setting_default = True,
)

config_setting(
    name = "enable_threads",
    flag_values = {":threads": str(True)},
)

bool_flag(
    name = "tooling",
    build_setting_default = False,
)

config_setting(
    name = "enable_tooling",
    flag_values = {":tooling": str(True)},
)

bool_flag(
    name = "verbose",
    build_setting_default = False,
)

config_setting(
    name = "enable_verbose",
    flag_values = {":verbose": str(True)},
)

## PPX control
string_flag(
    name = "ppx-out",
    build_setting_default = "binary",
    values = [
        "binary",
        "text",
    ],
)

config_setting(
    name = "enable_ppx_output_format_text",
    flag_values = {":ppx-out": "text"},
)

config_setting(
    name = "enable_ppx_output_format_binary",
    flag_values = {":ppx-out": "binary"},
)
