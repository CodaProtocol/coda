## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns",
)
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "string_flag")
load(
    "//:BUILD.bzl",
    "REPO_ARCHIVE_OPTS",
    "REPO_MODULE_OPTS",
    "REPO_NS_MODULE_OPTS",
)
load(
    ":BUILD.bzl",
    "PKG_ARCHIVE_OPTS",
    "PKG_MODULE_OPTS",
    "PKG_NS_MODULE_OPTS",
)

################################################################
## STANZA 1: LIBRARY POKOLOG
################################################################
POKOLOG_MODULE_OPTS = REPO_MODULE_OPTS + PKG_MODULE_OPTS

POKOLOG_ARCHIVE_OPTS = REPO_ARCHIVE_OPTS + PKG_ARCHIVE_OPTS + []

POKOLOG_NS_MODULE_OPTS = REPO_NS_MODULE_OPTS + PKG_NS_MODULE_OPTS

POKOLOG_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:core_kernel",
    "@snarky//src/base:snarky_backendless",
]

POKOLOG_PPX = "@//bzl/ppx:ppx.exe[ppx_version][ppx_jane][ppx_deriving.eq][bisect_ppx]"

POKOLOG_PPX_ARGS = [
    # do not sort (buildifier)
    "--conditional",
    "-inline-test-lib",
    "pokolog",
]

##############
ocaml_archive(
    name = "pokolog",
    opts = POKOLOG_ARCHIVE_OPTS,
    visibility = ["//visibility:public"],
    deps = POKOLOG_DEPS + [
        # do not sort (buildifier)
        ":_Group_intf",
        ":_Hash_intf",
        ":_Inputs_intf",
        ":_Intf",
        ":_Pokolog",
        ":_Proof",
        ":_Scalar_intf",
        ":_Variable_base_instance",
    ],
)

#########
ocaml_ns(
    name = "Pokolog_ns",
    ns = "pokolog",
    opts = POKOLOG_NS_MODULE_OPTS,
    submodules = [
        # do not sort (buildifier)
        "group_intf.ml",
        "hash_intf.ml",
        "inputs_intf.ml",
        "intf.ml",
        "pokolog.ml",
        "proof.ml",
        "scalar_intf.ml",
        "variable_base_instance.ml",
    ],
)

#############
ocaml_module(
    name = "_Group_intf",
    src = "group_intf.ml",
    ns = ":Pokolog_ns",
    opts = POKOLOG_MODULE_OPTS,
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    deps = POKOLOG_DEPS + [
        # do not sort (buildifier)
        ":_Scalar_intf",
    ],
)

#############
ocaml_module(
    name = "_Hash_intf",
    src = "hash_intf.ml",
    ns = ":Pokolog_ns",
    opts = POKOLOG_MODULE_OPTS,
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    deps = POKOLOG_DEPS + [
        # do not sort (buildifier)
        ":_Group_intf",
        ":_Scalar_intf",
    ],
)

#############
ocaml_module(
    name = "_Inputs_intf",
    src = "inputs_intf.ml",
    ns = ":Pokolog_ns",
    opts = POKOLOG_MODULE_OPTS,
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    deps = POKOLOG_DEPS + [
        # do not sort (buildifier)
        ":_Group_intf",
        ":_Hash_intf",
        ":_Scalar_intf",
    ],
)

#############
ocaml_module(
    name = "_Intf",
    src = "intf.ml",
    ns = ":Pokolog_ns",
    opts = POKOLOG_MODULE_OPTS,
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    deps = POKOLOG_DEPS + [
        # do not sort (buildifier)
        ":_Inputs_intf",
        ":_Proof",
        ":_Variable_base_instance",
    ],
)

#############
ocaml_module(
    name = "_Pokolog",
    src = "pokolog.ml",
    ns = ":Pokolog_ns",
    opts = POKOLOG_MODULE_OPTS,
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    deps = POKOLOG_DEPS + [
        # do not sort (buildifier)
        ":_Inputs_intf",
        ":_Intf",
        ":_Proof",
        ":_Variable_base_instance",
    ],
)

#############
ocaml_module(
    name = "_Proof",
    src = "proof.ml",
    ns = ":Pokolog_ns",
    opts = POKOLOG_MODULE_OPTS,
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    deps = POKOLOG_DEPS,
)

#############
ocaml_module(
    name = "_Scalar_intf",
    src = "scalar_intf.ml",
    ns = ":Pokolog_ns",
    opts = POKOLOG_MODULE_OPTS,
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    deps = POKOLOG_DEPS,
)

#############
ocaml_module(
    name = "_Variable_base_instance",
    src = "variable_base_instance.ml",
    ns = ":Pokolog_ns",
    opts = POKOLOG_MODULE_OPTS,
    ppx = POKOLOG_PPX,
    ppx_args = POKOLOG_PPX_ARGS,
    deps = POKOLOG_DEPS,
)

###################################################################
######## Configuration Settings - see :BUILD.bzl #################
bool_flag(
    name = "always-link",
    build_setting_default = False,
)

config_setting(
    name = "enable_always_link",
    flag_values = {":always-link": str(True)},
)

bool_flag(
    name = "debug",
    build_setting_default = True,
)

config_setting(
    name = "enable_debug",
    flag_values = {":debug": str(True)},
)

bool_flag(
    name = "threads",
    build_setting_default = True,
)

config_setting(
    name = "enable_threads",
    flag_values = {":threads": str(True)},
)

bool_flag(
    name = "tooling",
    build_setting_default = False,
)

config_setting(
    name = "enable_tooling",
    flag_values = {":tooling": str(True)},
)

bool_flag(
    name = "verbose",
    build_setting_default = False,
)

config_setting(
    name = "enable_verbose",
    flag_values = {":verbose": str(True)},
)

## PPX control
string_flag(
    name = "ppx-out",
    build_setting_default = "binary",
    values = [
        "binary",
        "text",
    ],
)

config_setting(
    name = "enable_ppx_output_format_text",
    flag_values = {":ppx-out": "text"},
)

config_setting(
    name = "enable_ppx_output_format_binary",
    flag_values = {":ppx-out": "binary"},
)
