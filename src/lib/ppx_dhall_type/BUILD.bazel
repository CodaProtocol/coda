## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_ns",
    "ppx_archive",
    "ppx_module",
)
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "string_flag")
load(
    "//:BUILD.bzl",
    "REPO_NS_MODULE_OPTS",
    "REPO_PPX_ARCHIVE_OPTS",
    "REPO_PPX_MODULE_OPTS",
    "REPO_PPX_RUNTIME_DATA",
)
load(
    ":BUILD.bzl",
    "PKG_NS_MODULE_OPTS",
    "PKG_PPX_ARCHIVE_OPTS",
    "PKG_PPX_MODULE_OPTS",
)

################################################################
## STANZA 1: PPX_DHALL_TYPE
################################################################
PPX_DHALL_TYPE_PPX_MODULE_OPTS = REPO_PPX_MODULE_OPTS + PKG_PPX_MODULE_OPTS

PPX_DHALL_TYPE_PPX_ARCHIVE_OPTS = REPO_PPX_ARCHIVE_OPTS + PKG_PPX_ARCHIVE_OPTS + []

PPX_DHALL_TYPE_NS_MODULE_OPTS = REPO_NS_MODULE_OPTS + PKG_NS_MODULE_OPTS

PPX_DHALL_TYPE_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:ppxlib",
    "@opam//pkg:core_kernel",
]

PPX_DHALL_TYPE_PPX = "//bzl/ppx:ppx.exe[ppx_version][ppxlib.metaquot][bisect_ppx]"

PPX_DHALL_TYPE_PPX_ARGS = [
    # do not sort (buildifier)
    "--conditional",
]

############
ppx_archive(
    name = "ppx_dhall_type",
    opts = PPX_DHALL_TYPE_PPX_ARCHIVE_OPTS,
    visibility = ["//visibility:public"],
    deps = PPX_DHALL_TYPE_DEPS + [
        # do not sort (buildifier)
        ":Deriving",
        ":Dhall_type",
    ],
)

#########
ocaml_ns(
    name = "Ppx_dhall_type_ns",
    ns = "ppx_dhall_type",
    opts = PPX_DHALL_TYPE_NS_MODULE_OPTS,
    submodules = [
        # do not sort (buildifier)
        "deriving.ml",
        "dhall_type.ml",
    ],
)

###########
ppx_module(
    name = "Deriving",
    src = "deriving.ml",
    ns = ":Ppx_dhall_type_ns",
    opts = PPX_DHALL_TYPE_PPX_MODULE_OPTS,
    ppx = PPX_DHALL_TYPE_PPX,
    ppx_args = PPX_DHALL_TYPE_PPX_ARGS,
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:ppxlib",
        "@opam//pkg:core_kernel",
    ],
)

###########
ppx_module(
    name = "Dhall_type",
    src = "dhall_type.ml",
    ns = ":Ppx_dhall_type_ns",
    opts = PPX_DHALL_TYPE_PPX_MODULE_OPTS,
    ppx = PPX_DHALL_TYPE_PPX,
    ppx_args = PPX_DHALL_TYPE_PPX_ARGS,
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:ppxlib",
        "@opam//pkg:core_kernel",
    ],
)

###################################################################
######## Configuration Settings - see :BUILD.bzl #################
bool_flag(
    name = "always-link",
    build_setting_default = False,
)

config_setting(
    name = "enable_always_link",
    flag_values = {":always-link": str(True)},
)

bool_flag(
    name = "debug",
    build_setting_default = True,
)

config_setting(
    name = "enable_debug",
    flag_values = {":debug": str(True)},
)

bool_flag(
    name = "threads",
    build_setting_default = True,
)

config_setting(
    name = "enable_threads",
    flag_values = {":threads": str(True)},
)

bool_flag(
    name = "tooling",
    build_setting_default = False,
)

config_setting(
    name = "enable_tooling",
    flag_values = {":tooling": str(True)},
)

bool_flag(
    name = "verbose",
    build_setting_default = False,
)

config_setting(
    name = "enable_verbose",
    flag_values = {":verbose": str(True)},
)

## PPX control
string_flag(
    name = "ppx-out",
    build_setting_default = "binary",
    values = [
        "binary",
        "text",
    ],
)

config_setting(
    name = "enable_ppx_output_format_text",
    flag_values = {":ppx-out": "text"},
)

config_setting(
    name = "enable_ppx_output_format_binary",
    flag_values = {":ppx-out": "binary"},
)
