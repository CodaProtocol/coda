# WARNING: config.yml file is generated from config.yml.jinja
---
version: 2
jobs:
    tracetool:
        docker:
            - image: codaprotocol/coda:toolchain-rust-5b183eb006ea0bf720c8f14965c31f7890909e91
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Build trace-tool
                  command: cd src/app/trace-tool && cargo build --frozen

    lint:
        docker:
            - image: codaprotocol/coda:toolchain-7df6b2b12bc316cb71592b12255d80e19396831e
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: OCamlformat (make check-format)
                  command: eval `opam config env` && make check-format
            - run:
                  name: Snarky tracks master (make check-snarky-submodule)
                  command: make check-snarky-submodule

    build-macos:
        macos:
            xcode: "10.1.0"
        working_directory: /Users/distiller/coda
        env:
            HOMEBREW_LOGS: /Users/distiller/homebrew.log
        steps:
            - restore_cache:
                  keys:
                      - macos-v3
                      - macos-v3-opam
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Download Deps -- make macos-setup-download
                  command: make macos-setup-download
            - save_cache:
                  key: macos-v3
                  paths:
                      - "/usr/local/Homebrew"
            - run:
                  name: Compile Deps -- make macos-setup-compile
                  command: make macos-setup-compile
            - save_cache:
                  key: macos-v3-opam
                  paths:
                      - "/Users/distiller/.opam"
            - run:
                  name: Build OCaml
                  command: eval `opam config env` && make build 2>&1 | tee /tmp/buildocaml.log
            - run:
                  name: Run all tests (on master)
                  command: bash -c '[ ! "$(CIRCLE_BRANCH)" = "master" ] || (`opam config env` && make test)'
    build_dev:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-7df6b2b12bc316cb71592b12255d80e19396831e
        environment:
            DUNE_PROFILE: dev
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Download Stable Proving Keys
                  command: scripts/getkeys.sh
            - run:
                  name: Build OCaml (sig)
                  command: eval `opam config env` && make build 2>&1 | tee /tmp/buildocaml.log
            - run:
                  name: Build deb Package with keys
                  command: make deb
            - run:
                  name: Build provingkeys
                  command: make provingkeys
            - run:
                  name: Store Genesis keys
                  command: make genesiskeys
            - run:
                  name: Upload deb to repo
                  command: make publish_deb
            - store_artifacts:
                  path: /tmp/artifacts
    build_testnet_posig:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-7df6b2b12bc316cb71592b12255d80e19396831e
        environment:
            DUNE_PROFILE: testnet_posig
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Download Stable Proving Keys
                  command: scripts/getkeys.sh
            - run:
                  name: Build OCaml (sig)
                  command: eval `opam config env` && make build 2>&1 | tee /tmp/buildocaml.log
            - run:
                  name: Build deb Package with keys
                  command: make deb
            - run:
                  name: Build provingkeys
                  command: make provingkeys
            - run:
                  name: Store Genesis keys
                  command: make genesiskeys
            - run:
                  name: Upload deb to repo
                  command: make publish_deb
            - store_artifacts:
                  path: /tmp/artifacts
    build_testnet_postake:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-7df6b2b12bc316cb71592b12255d80e19396831e
        environment:
            DUNE_PROFILE: testnet_postake
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Download Stable Proving Keys
                  command: scripts/getkeys.sh
            - run:
                  name: Build OCaml (sig)
                  command: eval `opam config env` && make build 2>&1 | tee /tmp/buildocaml.log
            - run:
                  name: Build deb Package with keys
                  command: make deb
            - run:
                  name: Build provingkeys
                  command: make provingkeys
            - run:
                  name: Store Genesis keys
                  command: make genesiskeys
            - run:
                  name: Upload deb to repo
                  command: make publish_deb
            - store_artifacts:
                  path: /tmp/artifacts
    build_testnet_public:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-7df6b2b12bc316cb71592b12255d80e19396831e
        environment:
            DUNE_PROFILE: testnet_public
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Download Stable Proving Keys
                  command: scripts/getkeys.sh
            - run:
                  name: Build OCaml (sig)
                  command: eval `opam config env` && make build 2>&1 | tee /tmp/buildocaml.log
            - run:
                  name: Build deb Package with keys
                  command: make deb
            - run:
                  name: Build provingkeys
                  command: make provingkeys
            - run:
                  name: Store Genesis keys
                  command: make genesiskeys
            - run:
                  name: Upload deb to repo
                  command: make publish_deb
            - store_artifacts:
                  path: /tmp/artifacts

    test-unit-test:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-7df6b2b12bc316cb71592b12255d80e19396831e
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Test make test-runtest
                  command: source ~/.profile && DUNE_PROFILE=test_posig_snarkless MYPROCS=8 make test-runtest

    test-withsnark:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-7df6b2b12bc316cb71592b12255d80e19396831e
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Build OCaml
                  command: eval `opam config env` && DUNE_PROFILE=test_posig make build 2>&1 | tee /tmp/buildocaml.log
            - run:
                  name: Test make test-withsnark
                  command: source ~/.profile && DUNE_PROFILE=test_posig make test-withsnark
    test-fake_hash_full_test:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-7df6b2b12bc316cb71592b12255d80e19396831e
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Check .circleci Render
                  command: make check-render-circleci
            - run:
                  name: Build OCaml
                  command: eval `opam config env` && DUNE_PROFILE=fake_hash make build 2>&1 | tee /tmp/buildocaml.log
            - run:
                  name: Running test - Fake Hash | full-test
                  command: source ~/.profile && DUNE_PROFILE=fake_hash source scripts/test_all.sh && cd src/ && CODA_PROPOSAL_INTERVAL=8000 'run_integration_test' 'full-test'
    test-posig_integration_tests:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-7df6b2b12bc316cb71592b12255d80e19396831e
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Check .circleci Render
                  command: make check-render-circleci
            - run:
                  name: Build OCaml
                  command: eval `opam config env` && DUNE_PROFILE=test_posig_snarkless make build 2>&1 | tee /tmp/buildocaml.log
            - run:
                  name: Running test - Proof of Signature Tests | full-test
                  command: source ~/.profile && DUNE_PROFILE=test_posig_snarkless source scripts/test_all.sh && cd src/ && CODA_PROPOSAL_INTERVAL=8000 'run_integration_test' 'full-test'
            - run:
                  name: Running test - Proof of Signature Tests | coda-peers-test
                  command: source ~/.profile && DUNE_PROFILE=test_posig_snarkless source scripts/test_all.sh && cd src/ && CODA_PROPOSAL_INTERVAL=8000 'run_integration_test' 'coda-peers-test'
            - run:
                  name: Running test - Proof of Signature Tests | coda-transitive-peers-test
                  command: source ~/.profile && DUNE_PROFILE=test_posig_snarkless source scripts/test_all.sh && cd src/ && CODA_PROPOSAL_INTERVAL=8000 'run_integration_test' 'coda-transitive-peers-test'
            - run:
                  name: Running test - Proof of Signature Tests | coda-block-production-test
                  command: source ~/.profile && DUNE_PROFILE=test_posig_snarkless source scripts/test_all.sh && cd src/ && CODA_PROPOSAL_INTERVAL=8000 'run_integration_test' 'coda-block-production-test'
            - run:
                  name: Running test - Proof of Signature Tests | coda-shared-prefix-test -who-proposes 0
                  command: source ~/.profile && DUNE_PROFILE=test_posig_snarkless source scripts/test_all.sh && cd src/ && CODA_PROPOSAL_INTERVAL=8000 'run_integration_test' 'coda-shared-prefix-test -who-proposes 0'
            - run:
                  name: Running test - Proof of Signature Tests | coda-shared-prefix-test -who-proposes 1
                  command: source ~/.profile && DUNE_PROFILE=test_posig_snarkless source scripts/test_all.sh && cd src/ && CODA_PROPOSAL_INTERVAL=8000 'run_integration_test' 'coda-shared-prefix-test -who-proposes 1'
            - run:
                  name: Running test - Proof of Signature Tests | coda-shared-state-test
                  command: source ~/.profile && DUNE_PROFILE=test_posig_snarkless source scripts/test_all.sh && cd src/ && CODA_PROPOSAL_INTERVAL=8000 'run_integration_test' 'coda-shared-state-test'
            - run:
                  name: Running test - Proof of Signature Tests | coda-restart-node-test
                  command: source ~/.profile && DUNE_PROFILE=test_posig_snarkless source scripts/test_all.sh && cd src/ && CODA_PROPOSAL_INTERVAL=8000 'run_integration_test' 'coda-restart-node-test'
            - run:
                  name: Running test - Proof of Signature Tests | transaction-snark-profiler -check-only
                  command: source ~/.profile && DUNE_PROFILE=test_posig_snarkless source scripts/test_all.sh && cd src/ && CODA_PROPOSAL_INTERVAL=8000 'run_integration_test' 'transaction-snark-profiler -check-only'
    test-postake_integration_tests:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-7df6b2b12bc316cb71592b12255d80e19396831e
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Check .circleci Render
                  command: make check-render-circleci
            - run:
                  name: Build OCaml
                  command: eval `opam config env` && DUNE_PROFILE=test_postake_snarkless make build 2>&1 | tee /tmp/buildocaml.log
            - run:
                  name: Running test - Proof of Stake Tests | full-test
                  command: source ~/.profile && DUNE_PROFILE=test_postake_snarkless source scripts/test_all.sh && cd src/ && CODA_SLOT_INTERVAL=8000 CODA_UNFORKABLE_TRANSITION_COUNT=24 CODA_PROBABLE_SLOTS_PER_TRANSITION_COUNT=8 'run_integration_test' 'full-test'
            - run:
                  name: Running test - Proof of Stake Tests | coda-peers-test
                  command: source ~/.profile && DUNE_PROFILE=test_postake_snarkless source scripts/test_all.sh && cd src/ && CODA_SLOT_INTERVAL=8000 CODA_UNFORKABLE_TRANSITION_COUNT=24 CODA_PROBABLE_SLOTS_PER_TRANSITION_COUNT=8 'run_integration_test' 'coda-peers-test'
            - run:
                  name: Running test - Proof of Stake Tests | coda-transitive-peers-test
                  command: source ~/.profile && DUNE_PROFILE=test_postake_snarkless source scripts/test_all.sh && cd src/ && CODA_SLOT_INTERVAL=8000 CODA_UNFORKABLE_TRANSITION_COUNT=24 CODA_PROBABLE_SLOTS_PER_TRANSITION_COUNT=8 'run_integration_test' 'coda-transitive-peers-test'
            - run:
                  name: Running test - Proof of Stake Tests | coda-block-production-test
                  command: source ~/.profile && DUNE_PROFILE=test_postake_snarkless source scripts/test_all.sh && cd src/ && CODA_SLOT_INTERVAL=8000 CODA_UNFORKABLE_TRANSITION_COUNT=24 CODA_PROBABLE_SLOTS_PER_TRANSITION_COUNT=8 'run_integration_test' 'coda-block-production-test'
            - run:
                  name: Running test - Proof of Stake Tests | coda-shared-prefix-test -who-proposes 0
                  command: source ~/.profile && DUNE_PROFILE=test_postake_snarkless source scripts/test_all.sh && cd src/ && CODA_SLOT_INTERVAL=8000 CODA_UNFORKABLE_TRANSITION_COUNT=24 CODA_PROBABLE_SLOTS_PER_TRANSITION_COUNT=8 'run_integration_test' 'coda-shared-prefix-test -who-proposes 0'
            - run:
                  name: Running test - Proof of Stake Tests | coda-shared-prefix-test -who-proposes 1
                  command: source ~/.profile && DUNE_PROFILE=test_postake_snarkless source scripts/test_all.sh && cd src/ && CODA_SLOT_INTERVAL=8000 CODA_UNFORKABLE_TRANSITION_COUNT=24 CODA_PROBABLE_SLOTS_PER_TRANSITION_COUNT=8 'run_integration_test' 'coda-shared-prefix-test -who-proposes 1'
            - run:
                  name: Running test - Proof of Stake Tests | coda-shared-state-test
                  command: source ~/.profile && DUNE_PROFILE=test_postake_snarkless source scripts/test_all.sh && cd src/ && CODA_SLOT_INTERVAL=8000 CODA_UNFORKABLE_TRANSITION_COUNT=24 CODA_PROBABLE_SLOTS_PER_TRANSITION_COUNT=8 'run_integration_test' 'coda-shared-state-test'
            - run:
                  name: Running test - Proof of Stake Tests | coda-restart-node-test
                  command: source ~/.profile && DUNE_PROFILE=test_postake_snarkless source scripts/test_all.sh && cd src/ && CODA_SLOT_INTERVAL=8000 CODA_UNFORKABLE_TRANSITION_COUNT=24 CODA_PROBABLE_SLOTS_PER_TRANSITION_COUNT=8 'run_integration_test' 'coda-restart-node-test'
            - run:
                  name: Running test - Proof of Stake Tests | transaction-snark-profiler -check-only
                  command: source ~/.profile && DUNE_PROFILE=test_postake_snarkless source scripts/test_all.sh && cd src/ && CODA_SLOT_INTERVAL=8000 CODA_UNFORKABLE_TRANSITION_COUNT=24 CODA_PROBABLE_SLOTS_PER_TRANSITION_COUNT=8 'run_integration_test' 'transaction-snark-profiler -check-only'

workflows:
    version: 2
    coda_parallel:
        jobs:
            - lint
            - build-macos
            - build_dev
            - build_testnet_posig
            - build_testnet_postake
            - build_testnet_public
            - test-fake_hash_full_test
            - test-posig_integration_tests
            - test-postake_integration_tests
            - test-withsnark
            - test-unit-test
            - tracetool
